
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000368c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003798  08003798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800382c  0800382c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800382c  0800382c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800382c  0800382c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003830  08003830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000070  080038a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  080038a4  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab64  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d93  00000000  00000000  0002abfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0002c990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0002d638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179fe  00000000  00000000  0002e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce29  00000000  00000000  00045c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008856f  00000000  00000000  00052a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000daf9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f4  00000000  00000000  000daff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003780 	.word	0x08003780

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003780 	.word	0x08003780

0800014c <display_led7_seg>:
 *      Author: legolas
 */

#include "led7seg.h"
#include "main.h"
void display_led7_seg(int count){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(count==0){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d122      	bne.n	80001a0 <display_led7_seg+0x54>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	2101      	movs	r1, #1
 800015e:	48be      	ldr	r0, [pc, #760]	; (8000458 <display_led7_seg+0x30c>)
 8000160:	f001 f95a 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	2102      	movs	r1, #2
 8000168:	48bb      	ldr	r0, [pc, #748]	; (8000458 <display_led7_seg+0x30c>)
 800016a:	f001 f955 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	2104      	movs	r1, #4
 8000172:	48b9      	ldr	r0, [pc, #740]	; (8000458 <display_led7_seg+0x30c>)
 8000174:	f001 f950 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	2108      	movs	r1, #8
 800017c:	48b6      	ldr	r0, [pc, #728]	; (8000458 <display_led7_seg+0x30c>)
 800017e:	f001 f94b 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000182:	2200      	movs	r2, #0
 8000184:	2110      	movs	r1, #16
 8000186:	48b4      	ldr	r0, [pc, #720]	; (8000458 <display_led7_seg+0x30c>)
 8000188:	f001 f946 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2120      	movs	r1, #32
 8000190:	48b1      	ldr	r0, [pc, #708]	; (8000458 <display_led7_seg+0x30c>)
 8000192:	f001 f941 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000196:	2201      	movs	r2, #1
 8000198:	2140      	movs	r1, #64	; 0x40
 800019a:	48af      	ldr	r0, [pc, #700]	; (8000458 <display_led7_seg+0x30c>)
 800019c:	f001 f93c 	bl	8001418 <HAL_GPIO_WritePin>
	}
	if(count==1){
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d122      	bne.n	80001ec <display_led7_seg+0xa0>

		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80001a6:	2201      	movs	r2, #1
 80001a8:	2101      	movs	r1, #1
 80001aa:	48ab      	ldr	r0, [pc, #684]	; (8000458 <display_led7_seg+0x30c>)
 80001ac:	f001 f934 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	2102      	movs	r1, #2
 80001b4:	48a8      	ldr	r0, [pc, #672]	; (8000458 <display_led7_seg+0x30c>)
 80001b6:	f001 f92f 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80001ba:	2200      	movs	r2, #0
 80001bc:	2104      	movs	r1, #4
 80001be:	48a6      	ldr	r0, [pc, #664]	; (8000458 <display_led7_seg+0x30c>)
 80001c0:	f001 f92a 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	2108      	movs	r1, #8
 80001c8:	48a3      	ldr	r0, [pc, #652]	; (8000458 <display_led7_seg+0x30c>)
 80001ca:	f001 f925 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80001ce:	2201      	movs	r2, #1
 80001d0:	2110      	movs	r1, #16
 80001d2:	48a1      	ldr	r0, [pc, #644]	; (8000458 <display_led7_seg+0x30c>)
 80001d4:	f001 f920 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	2120      	movs	r1, #32
 80001dc:	489e      	ldr	r0, [pc, #632]	; (8000458 <display_led7_seg+0x30c>)
 80001de:	f001 f91b 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2140      	movs	r1, #64	; 0x40
 80001e6:	489c      	ldr	r0, [pc, #624]	; (8000458 <display_led7_seg+0x30c>)
 80001e8:	f001 f916 	bl	8001418 <HAL_GPIO_WritePin>
		}
	if(count==2){
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d122      	bne.n	8000238 <display_led7_seg+0xec>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2101      	movs	r1, #1
 80001f6:	4898      	ldr	r0, [pc, #608]	; (8000458 <display_led7_seg+0x30c>)
 80001f8:	f001 f90e 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2102      	movs	r1, #2
 8000200:	4895      	ldr	r0, [pc, #596]	; (8000458 <display_led7_seg+0x30c>)
 8000202:	f001 f909 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2104      	movs	r1, #4
 800020a:	4893      	ldr	r0, [pc, #588]	; (8000458 <display_led7_seg+0x30c>)
 800020c:	f001 f904 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	2108      	movs	r1, #8
 8000214:	4890      	ldr	r0, [pc, #576]	; (8000458 <display_led7_seg+0x30c>)
 8000216:	f001 f8ff 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	2110      	movs	r1, #16
 800021e:	488e      	ldr	r0, [pc, #568]	; (8000458 <display_led7_seg+0x30c>)
 8000220:	f001 f8fa 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	2120      	movs	r1, #32
 8000228:	488b      	ldr	r0, [pc, #556]	; (8000458 <display_led7_seg+0x30c>)
 800022a:	f001 f8f5 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2140      	movs	r1, #64	; 0x40
 8000232:	4889      	ldr	r0, [pc, #548]	; (8000458 <display_led7_seg+0x30c>)
 8000234:	f001 f8f0 	bl	8001418 <HAL_GPIO_WritePin>
		}
	if(count==3){
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b03      	cmp	r3, #3
 800023c:	d122      	bne.n	8000284 <display_led7_seg+0x138>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2101      	movs	r1, #1
 8000242:	4885      	ldr	r0, [pc, #532]	; (8000458 <display_led7_seg+0x30c>)
 8000244:	f001 f8e8 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2102      	movs	r1, #2
 800024c:	4882      	ldr	r0, [pc, #520]	; (8000458 <display_led7_seg+0x30c>)
 800024e:	f001 f8e3 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000252:	2200      	movs	r2, #0
 8000254:	2104      	movs	r1, #4
 8000256:	4880      	ldr	r0, [pc, #512]	; (8000458 <display_led7_seg+0x30c>)
 8000258:	f001 f8de 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	2108      	movs	r1, #8
 8000260:	487d      	ldr	r0, [pc, #500]	; (8000458 <display_led7_seg+0x30c>)
 8000262:	f001 f8d9 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000266:	2201      	movs	r2, #1
 8000268:	2110      	movs	r1, #16
 800026a:	487b      	ldr	r0, [pc, #492]	; (8000458 <display_led7_seg+0x30c>)
 800026c:	f001 f8d4 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000270:	2201      	movs	r2, #1
 8000272:	2120      	movs	r1, #32
 8000274:	4878      	ldr	r0, [pc, #480]	; (8000458 <display_led7_seg+0x30c>)
 8000276:	f001 f8cf 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	2140      	movs	r1, #64	; 0x40
 800027e:	4876      	ldr	r0, [pc, #472]	; (8000458 <display_led7_seg+0x30c>)
 8000280:	f001 f8ca 	bl	8001418 <HAL_GPIO_WritePin>
		}
	if(count==4){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2b04      	cmp	r3, #4
 8000288:	d122      	bne.n	80002d0 <display_led7_seg+0x184>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 800028a:	2201      	movs	r2, #1
 800028c:	2101      	movs	r1, #1
 800028e:	4872      	ldr	r0, [pc, #456]	; (8000458 <display_led7_seg+0x30c>)
 8000290:	f001 f8c2 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2102      	movs	r1, #2
 8000298:	486f      	ldr	r0, [pc, #444]	; (8000458 <display_led7_seg+0x30c>)
 800029a:	f001 f8bd 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2104      	movs	r1, #4
 80002a2:	486d      	ldr	r0, [pc, #436]	; (8000458 <display_led7_seg+0x30c>)
 80002a4:	f001 f8b8 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2108      	movs	r1, #8
 80002ac:	486a      	ldr	r0, [pc, #424]	; (8000458 <display_led7_seg+0x30c>)
 80002ae:	f001 f8b3 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2110      	movs	r1, #16
 80002b6:	4868      	ldr	r0, [pc, #416]	; (8000458 <display_led7_seg+0x30c>)
 80002b8:	f001 f8ae 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	2120      	movs	r1, #32
 80002c0:	4865      	ldr	r0, [pc, #404]	; (8000458 <display_led7_seg+0x30c>)
 80002c2:	f001 f8a9 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2140      	movs	r1, #64	; 0x40
 80002ca:	4863      	ldr	r0, [pc, #396]	; (8000458 <display_led7_seg+0x30c>)
 80002cc:	f001 f8a4 	bl	8001418 <HAL_GPIO_WritePin>
				}
	if(count==5){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b05      	cmp	r3, #5
 80002d4:	d122      	bne.n	800031c <display_led7_seg+0x1d0>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2101      	movs	r1, #1
 80002da:	485f      	ldr	r0, [pc, #380]	; (8000458 <display_led7_seg+0x30c>)
 80002dc:	f001 f89c 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2102      	movs	r1, #2
 80002e4:	485c      	ldr	r0, [pc, #368]	; (8000458 <display_led7_seg+0x30c>)
 80002e6:	f001 f897 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2104      	movs	r1, #4
 80002ee:	485a      	ldr	r0, [pc, #360]	; (8000458 <display_led7_seg+0x30c>)
 80002f0:	f001 f892 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2108      	movs	r1, #8
 80002f8:	4857      	ldr	r0, [pc, #348]	; (8000458 <display_led7_seg+0x30c>)
 80002fa:	f001 f88d 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2110      	movs	r1, #16
 8000302:	4855      	ldr	r0, [pc, #340]	; (8000458 <display_led7_seg+0x30c>)
 8000304:	f001 f888 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2120      	movs	r1, #32
 800030c:	4852      	ldr	r0, [pc, #328]	; (8000458 <display_led7_seg+0x30c>)
 800030e:	f001 f883 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2140      	movs	r1, #64	; 0x40
 8000316:	4850      	ldr	r0, [pc, #320]	; (8000458 <display_led7_seg+0x30c>)
 8000318:	f001 f87e 	bl	8001418 <HAL_GPIO_WritePin>
		}
	if(count==6){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b06      	cmp	r3, #6
 8000320:	d122      	bne.n	8000368 <display_led7_seg+0x21c>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2101      	movs	r1, #1
 8000326:	484c      	ldr	r0, [pc, #304]	; (8000458 <display_led7_seg+0x30c>)
 8000328:	f001 f876 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2102      	movs	r1, #2
 8000330:	4849      	ldr	r0, [pc, #292]	; (8000458 <display_led7_seg+0x30c>)
 8000332:	f001 f871 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2104      	movs	r1, #4
 800033a:	4847      	ldr	r0, [pc, #284]	; (8000458 <display_led7_seg+0x30c>)
 800033c:	f001 f86c 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2108      	movs	r1, #8
 8000344:	4844      	ldr	r0, [pc, #272]	; (8000458 <display_led7_seg+0x30c>)
 8000346:	f001 f867 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2110      	movs	r1, #16
 800034e:	4842      	ldr	r0, [pc, #264]	; (8000458 <display_led7_seg+0x30c>)
 8000350:	f001 f862 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2120      	movs	r1, #32
 8000358:	483f      	ldr	r0, [pc, #252]	; (8000458 <display_led7_seg+0x30c>)
 800035a:	f001 f85d 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2140      	movs	r1, #64	; 0x40
 8000362:	483d      	ldr	r0, [pc, #244]	; (8000458 <display_led7_seg+0x30c>)
 8000364:	f001 f858 	bl	8001418 <HAL_GPIO_WritePin>
		}
	if(count==7){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b07      	cmp	r3, #7
 800036c:	d122      	bne.n	80003b4 <display_led7_seg+0x268>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2101      	movs	r1, #1
 8000372:	4839      	ldr	r0, [pc, #228]	; (8000458 <display_led7_seg+0x30c>)
 8000374:	f001 f850 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2102      	movs	r1, #2
 800037c:	4836      	ldr	r0, [pc, #216]	; (8000458 <display_led7_seg+0x30c>)
 800037e:	f001 f84b 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2104      	movs	r1, #4
 8000386:	4834      	ldr	r0, [pc, #208]	; (8000458 <display_led7_seg+0x30c>)
 8000388:	f001 f846 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2108      	movs	r1, #8
 8000390:	4831      	ldr	r0, [pc, #196]	; (8000458 <display_led7_seg+0x30c>)
 8000392:	f001 f841 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2110      	movs	r1, #16
 800039a:	482f      	ldr	r0, [pc, #188]	; (8000458 <display_led7_seg+0x30c>)
 800039c:	f001 f83c 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2120      	movs	r1, #32
 80003a4:	482c      	ldr	r0, [pc, #176]	; (8000458 <display_led7_seg+0x30c>)
 80003a6:	f001 f837 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	2140      	movs	r1, #64	; 0x40
 80003ae:	482a      	ldr	r0, [pc, #168]	; (8000458 <display_led7_seg+0x30c>)
 80003b0:	f001 f832 	bl	8001418 <HAL_GPIO_WritePin>
		}
	if(count==8){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b08      	cmp	r3, #8
 80003b8:	d122      	bne.n	8000400 <display_led7_seg+0x2b4>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2101      	movs	r1, #1
 80003be:	4826      	ldr	r0, [pc, #152]	; (8000458 <display_led7_seg+0x30c>)
 80003c0:	f001 f82a 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2102      	movs	r1, #2
 80003c8:	4823      	ldr	r0, [pc, #140]	; (8000458 <display_led7_seg+0x30c>)
 80003ca:	f001 f825 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2104      	movs	r1, #4
 80003d2:	4821      	ldr	r0, [pc, #132]	; (8000458 <display_led7_seg+0x30c>)
 80003d4:	f001 f820 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2108      	movs	r1, #8
 80003dc:	481e      	ldr	r0, [pc, #120]	; (8000458 <display_led7_seg+0x30c>)
 80003de:	f001 f81b 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2110      	movs	r1, #16
 80003e6:	481c      	ldr	r0, [pc, #112]	; (8000458 <display_led7_seg+0x30c>)
 80003e8:	f001 f816 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2120      	movs	r1, #32
 80003f0:	4819      	ldr	r0, [pc, #100]	; (8000458 <display_led7_seg+0x30c>)
 80003f2:	f001 f811 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2140      	movs	r1, #64	; 0x40
 80003fa:	4817      	ldr	r0, [pc, #92]	; (8000458 <display_led7_seg+0x30c>)
 80003fc:	f001 f80c 	bl	8001418 <HAL_GPIO_WritePin>
		}
	if(count==9){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d123      	bne.n	800044e <display_led7_seg+0x302>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2101      	movs	r1, #1
 800040a:	4813      	ldr	r0, [pc, #76]	; (8000458 <display_led7_seg+0x30c>)
 800040c:	f001 f804 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2102      	movs	r1, #2
 8000414:	4810      	ldr	r0, [pc, #64]	; (8000458 <display_led7_seg+0x30c>)
 8000416:	f000 ffff 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2104      	movs	r1, #4
 800041e:	480e      	ldr	r0, [pc, #56]	; (8000458 <display_led7_seg+0x30c>)
 8000420:	f000 fffa 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2108      	movs	r1, #8
 8000428:	480b      	ldr	r0, [pc, #44]	; (8000458 <display_led7_seg+0x30c>)
 800042a:	f000 fff5 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800042e:	2201      	movs	r2, #1
 8000430:	2110      	movs	r1, #16
 8000432:	4809      	ldr	r0, [pc, #36]	; (8000458 <display_led7_seg+0x30c>)
 8000434:	f000 fff0 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2120      	movs	r1, #32
 800043c:	4806      	ldr	r0, [pc, #24]	; (8000458 <display_led7_seg+0x30c>)
 800043e:	f000 ffeb 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2140      	movs	r1, #64	; 0x40
 8000446:	4804      	ldr	r0, [pc, #16]	; (8000458 <display_led7_seg+0x30c>)
 8000448:	f000 ffe6 	bl	8001418 <HAL_GPIO_WritePin>
		}
	return;
 800044c:	bf00      	nop
 800044e:	bf00      	nop
}
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40010c00 	.word	0x40010c00

0800045c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int time_stand;
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000464:	f000 fa2e 	bl	80008c4 <SCH_Update>
	timer1_run();
 8000468:	f000 fbfa 	bl	8000c60 <timer1_run>

}
 800046c:	bf00      	nop
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <led1test>:
char str[50];

void led1test(){
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000478:	2120      	movs	r1, #32
 800047a:	480a      	ldr	r0, [pc, #40]	; (80004a4 <led1test+0x30>)
 800047c:	f000 ffe4 	bl	8001448 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"Time stand: %d led1test \r\n"
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <led1test+0x34>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	461a      	mov	r2, r3
 8000486:	4909      	ldr	r1, [pc, #36]	; (80004ac <led1test+0x38>)
 8000488:	4809      	ldr	r0, [pc, #36]	; (80004b0 <led1test+0x3c>)
 800048a:	f002 fcff 	bl	8002e8c <siprintf>
 800048e:	4603      	mov	r3, r0
 8000490:	b29a      	uxth	r2, r3
 8000492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000496:	4906      	ldr	r1, [pc, #24]	; (80004b0 <led1test+0x3c>)
 8000498:	4806      	ldr	r0, [pc, #24]	; (80004b4 <led1test+0x40>)
 800049a:	f002 f83a 	bl	8002512 <HAL_UART_Transmit>
		  		,time_stand),1000) ;
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40010800 	.word	0x40010800
 80004a8:	20000118 	.word	0x20000118
 80004ac:	08003798 	.word	0x08003798
 80004b0:	2000011c 	.word	0x2000011c
 80004b4:	200000d4 	.word	0x200000d4

080004b8 <led2test>:
void led2test(){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80004bc:	2140      	movs	r1, #64	; 0x40
 80004be:	480a      	ldr	r0, [pc, #40]	; (80004e8 <led2test+0x30>)
 80004c0:	f000 ffc2 	bl	8001448 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"Time stand: %d led2test \r\n"
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <led2test+0x34>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	461a      	mov	r2, r3
 80004ca:	4909      	ldr	r1, [pc, #36]	; (80004f0 <led2test+0x38>)
 80004cc:	4809      	ldr	r0, [pc, #36]	; (80004f4 <led2test+0x3c>)
 80004ce:	f002 fcdd 	bl	8002e8c <siprintf>
 80004d2:	4603      	mov	r3, r0
 80004d4:	b29a      	uxth	r2, r3
 80004d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004da:	4906      	ldr	r1, [pc, #24]	; (80004f4 <led2test+0x3c>)
 80004dc:	4806      	ldr	r0, [pc, #24]	; (80004f8 <led2test+0x40>)
 80004de:	f002 f818 	bl	8002512 <HAL_UART_Transmit>
			  		,time_stand),1000) ;
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40010800 	.word	0x40010800
 80004ec:	20000118 	.word	0x20000118
 80004f0:	080037b4 	.word	0x080037b4
 80004f4:	2000011c 	.word	0x2000011c
 80004f8:	200000d4 	.word	0x200000d4

080004fc <led3test>:
void led3test(){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	4802      	ldr	r0, [pc, #8]	; (800050c <led3test+0x10>)
 8000504:	f000 ffa0 	bl	8001448 <HAL_GPIO_TogglePin>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40010800 	.word	0x40010800

08000510 <led7seg>:
int count=0;
void led7seg(){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	if(count>=10) count=0;
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <led7seg+0x28>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b09      	cmp	r3, #9
 800051a:	dd02      	ble.n	8000522 <led7seg+0x12>
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <led7seg+0x28>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
	display_led7_seg(count++);
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <led7seg+0x28>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	4903      	ldr	r1, [pc, #12]	; (8000538 <led7seg+0x28>)
 800052a:	600a      	str	r2, [r1, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff fe0d 	bl	800014c <display_led7_seg>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000150 	.word	0x20000150

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fbce 	bl	8000ce0 <HAL_Init>

  /* USER CODE BEGIN Init */
  time_stand=0;
 8000544:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <main+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f83f 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f8ef 	bl	8000730 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000552:	f000 f877 	bl	8000644 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000556:	f000 f8c1 	bl	80006dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800055a:	4816      	ldr	r0, [pc, #88]	; (80005b4 <main+0x78>)
 800055c:	f001 fbf8 	bl	8001d50 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(led7seg,0,100);
 8000560:	2264      	movs	r2, #100	; 0x64
 8000562:	2100      	movs	r1, #0
 8000564:	4814      	ldr	r0, [pc, #80]	; (80005b8 <main+0x7c>)
 8000566:	f000 f957 	bl	8000818 <SCH_Add_Task>
  SCH_Add_Task(led1test,0,50);
 800056a:	2232      	movs	r2, #50	; 0x32
 800056c:	2100      	movs	r1, #0
 800056e:	4813      	ldr	r0, [pc, #76]	; (80005bc <main+0x80>)
 8000570:	f000 f952 	bl	8000818 <SCH_Add_Task>
  SCH_Add_Task(led2test,5,200);
 8000574:	22c8      	movs	r2, #200	; 0xc8
 8000576:	2105      	movs	r1, #5
 8000578:	4811      	ldr	r0, [pc, #68]	; (80005c0 <main+0x84>)
 800057a:	f000 f94d 	bl	8000818 <SCH_Add_Task>
  SCH_Add_Task(led3test,10,150);
 800057e:	2296      	movs	r2, #150	; 0x96
 8000580:	210a      	movs	r1, #10
 8000582:	4810      	ldr	r0, [pc, #64]	; (80005c4 <main+0x88>)
 8000584:	f000 f948 	bl	8000818 <SCH_Add_Task>
  setTimer1(500);
 8000588:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058c:	f000 fb4c 	bl	8000c28 <setTimer1>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000590:	f000 f9f8 	bl	8000984 <SCH_Dispatch_Tasks>
    /* USER CODE END WHILE */
	  if(timer1_flag==1){
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <main+0x8c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d1f9      	bne.n	8000590 <main+0x54>
		  time_stand++;
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <main+0x74>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	4a03      	ldr	r2, [pc, #12]	; (80005b0 <main+0x74>)
 80005a4:	6013      	str	r3, [r2, #0]
		  setTimer1(500);
 80005a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005aa:	f000 fb3d 	bl	8000c28 <setTimer1>
	  SCH_Dispatch_Tasks();
 80005ae:	e7ef      	b.n	8000590 <main+0x54>
 80005b0:	20000118 	.word	0x20000118
 80005b4:	2000008c 	.word	0x2000008c
 80005b8:	08000511 	.word	0x08000511
 80005bc:	08000475 	.word	0x08000475
 80005c0:	080004b9 	.word	0x080004b9
 80005c4:	080004fd 	.word	0x080004fd
 80005c8:	2000047c 	.word	0x2000047c

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b090      	sub	sp, #64	; 0x40
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	2228      	movs	r2, #40	; 0x28
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fc4e 	bl	8002e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ee:	2302      	movs	r3, #2
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f2:	2301      	movs	r3, #1
 80005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f6:	2310      	movs	r3, #16
 80005f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	4618      	mov	r0, r3
 8000604:	f000 ff3a 	bl	800147c <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800060e:	f000 f8fd 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f9a8 	bl	8001980 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000636:	f000 f8e9 	bl	800080c <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3740      	adds	r7, #64	; 0x40
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000658:	463b      	mov	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_TIM2_Init+0x94>)
 8000662:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000666:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_TIM2_Init+0x94>)
 800066a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800066e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_TIM2_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_TIM2_Init+0x94>)
 8000678:	2209      	movs	r2, #9
 800067a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_TIM2_Init+0x94>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_TIM2_Init+0x94>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <MX_TIM2_Init+0x94>)
 800068a:	f001 fb11 	bl	8001cb0 <HAL_TIM_Base_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000694:	f000 f8ba 	bl	800080c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	4619      	mov	r1, r3
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <MX_TIM2_Init+0x94>)
 80006a6:	f001 fca7 	bl	8001ff8 <HAL_TIM_ConfigClockSource>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006b0:	f000 f8ac 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_TIM2_Init+0x94>)
 80006c2:	f001 fe6f 	bl	80023a4 <HAL_TIMEx_MasterConfigSynchronization>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006cc:	f000 f89e 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000008c 	.word	0x2000008c

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART2_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000714:	f001 feb0 	bl	8002478 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f875 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000d4 	.word	0x200000d4
 800072c:	40004400 	.word	0x40004400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000744:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <MX_GPIO_Init+0xcc>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a2c      	ldr	r2, [pc, #176]	; (80007fc <MX_GPIO_Init+0xcc>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_GPIO_Init+0xcc>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0310 	and.w	r3, r3, #16
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_GPIO_Init+0xcc>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a26      	ldr	r2, [pc, #152]	; (80007fc <MX_GPIO_Init+0xcc>)
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_GPIO_Init+0xcc>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0304 	and.w	r3, r3, #4
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_GPIO_Init+0xcc>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a20      	ldr	r2, [pc, #128]	; (80007fc <MX_GPIO_Init+0xcc>)
 800077a:	f043 0308 	orr.w	r3, r3, #8
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_GPIO_Init+0xcc>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	21e0      	movs	r1, #224	; 0xe0
 8000790:	481b      	ldr	r0, [pc, #108]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000792:	f000 fe41 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000796:	2200      	movs	r2, #0
 8000798:	217f      	movs	r1, #127	; 0x7f
 800079a:	481a      	ldr	r0, [pc, #104]	; (8000804 <MX_GPIO_Init+0xd4>)
 800079c:	f000 fe3c 	bl	8001418 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 80007a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	4619      	mov	r1, r3
 80007b4:	4814      	ldr	r0, [pc, #80]	; (8000808 <MX_GPIO_Init+0xd8>)
 80007b6:	f000 fcb3 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin;
 80007ba:	23e0      	movs	r3, #224	; 0xe0
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <MX_GPIO_Init+0xd0>)
 80007d2:	f000 fca5 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80007d6:	237f      	movs	r3, #127	; 0x7f
 80007d8:	613b      	str	r3, [r7, #16]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_GPIO_Init+0xd4>)
 80007ee:	f000 fc97 	bl	8001120 <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010800 	.word	0x40010800
 8000804:	40010c00 	.word	0x40010c00
 8000808:	40011000 	.word	0x40011000

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <SCH_Add_Task>:
#include "scheduler.h"

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <SCH_Add_Task+0xa4>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b27      	cmp	r3, #39	; 0x27
 800082a:	d842      	bhi.n	80008b2 <SCH_Add_Task+0x9a>

		SCH_tasks_G[current_index_task].pTask = pFunction;
 800082c:	4b23      	ldr	r3, [pc, #140]	; (80008bc <SCH_Add_Task+0xa4>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	4a23      	ldr	r2, [pc, #140]	; (80008c0 <SCH_Add_Task+0xa8>)
 8000834:	460b      	mov	r3, r1
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	440b      	add	r3, r1
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY;
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <SCH_Add_Task+0xa4>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	4619      	mov	r1, r3
 8000848:	4a1d      	ldr	r2, [pc, #116]	; (80008c0 <SCH_Add_Task+0xa8>)
 800084a:	460b      	mov	r3, r1
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	440b      	add	r3, r1
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	3304      	adds	r3, #4
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period =  PERIOD;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <SCH_Add_Task+0xa4>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4619      	mov	r1, r3
 8000860:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <SCH_Add_Task+0xa8>)
 8000862:	460b      	mov	r3, r1
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	440b      	add	r3, r1
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4413      	add	r3, r2
 800086c:	3308      	adds	r3, #8
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <SCH_Add_Task+0xa4>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4619      	mov	r1, r3
 8000878:	4a11      	ldr	r2, [pc, #68]	; (80008c0 <SCH_Add_Task+0xa8>)
 800087a:	460b      	mov	r3, r1
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	440b      	add	r3, r1
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	330c      	adds	r3, #12
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <SCH_Add_Task+0xa4>)
 800088c:	781a      	ldrb	r2, [r3, #0]
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <SCH_Add_Task+0xa4>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4619      	mov	r1, r3
 8000894:	4610      	mov	r0, r2
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <SCH_Add_Task+0xa8>)
 8000898:	460b      	mov	r3, r1
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	440b      	add	r3, r1
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	3310      	adds	r3, #16
 80008a4:	6018      	str	r0, [r3, #0]

		current_index_task++;
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <SCH_Add_Task+0xa4>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	3301      	adds	r3, #1
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <SCH_Add_Task+0xa4>)
 80008b0:	701a      	strb	r2, [r3, #0]
	}
}
 80008b2:	bf00      	nop
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20000474 	.word	0x20000474
 80008c0:	20000154 	.word	0x20000154

080008c4 <SCH_Update>:

void SCH_Update(void){
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	e048      	b.n	8000962 <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0){
 80008d0:	492a      	ldr	r1, [pc, #168]	; (800097c <SCH_Update+0xb8>)
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	440b      	add	r3, r1
 80008de:	3304      	adds	r3, #4
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d013      	beq.n	800090e <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay --;
 80008e6:	4925      	ldr	r1, [pc, #148]	; (800097c <SCH_Update+0xb8>)
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	4613      	mov	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4413      	add	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	440b      	add	r3, r1
 80008f4:	3304      	adds	r3, #4
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	1e59      	subs	r1, r3, #1
 80008fa:	4820      	ldr	r0, [pc, #128]	; (800097c <SCH_Update+0xb8>)
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4613      	mov	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	4403      	add	r3, r0
 8000908:	3304      	adds	r3, #4
 800090a:	6019      	str	r1, [r3, #0]
 800090c:	e026      	b.n	800095c <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 800090e:	491b      	ldr	r1, [pc, #108]	; (800097c <SCH_Update+0xb8>)
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	4613      	mov	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	440b      	add	r3, r1
 800091c:	3308      	adds	r3, #8
 800091e:	6819      	ldr	r1, [r3, #0]
 8000920:	4816      	ldr	r0, [pc, #88]	; (800097c <SCH_Update+0xb8>)
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	4613      	mov	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4413      	add	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4403      	add	r3, r0
 800092e:	3304      	adds	r3, #4
 8000930:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8000932:	4912      	ldr	r1, [pc, #72]	; (800097c <SCH_Update+0xb8>)
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	440b      	add	r3, r1
 8000940:	330c      	adds	r3, #12
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	b2d8      	uxtb	r0, r3
 8000948:	490c      	ldr	r1, [pc, #48]	; (800097c <SCH_Update+0xb8>)
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	440b      	add	r3, r1
 8000956:	330c      	adds	r3, #12
 8000958:	4602      	mov	r2, r0
 800095a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_index_task; i++){
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3301      	adds	r3, #1
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <SCH_Update+0xbc>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4293      	cmp	r3, r2
 800096c:	dbb0      	blt.n	80008d0 <SCH_Update+0xc>
		}
	}
}
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000154 	.word	0x20000154
 8000980:	20000474 	.word	0x20000474

08000984 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	e02b      	b.n	80009e8 <SCH_Dispatch_Tasks+0x64>
		if(SCH_tasks_G[i].RunMe > 0){
 8000990:	491b      	ldr	r1, [pc, #108]	; (8000a00 <SCH_Dispatch_Tasks+0x7c>)
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	4613      	mov	r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	4413      	add	r3, r2
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	440b      	add	r3, r1
 800099e:	330c      	adds	r3, #12
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d01d      	beq.n	80009e2 <SCH_Dispatch_Tasks+0x5e>
			SCH_tasks_G[i].RunMe--;
 80009a6:	4916      	ldr	r1, [pc, #88]	; (8000a00 <SCH_Dispatch_Tasks+0x7c>)
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	4613      	mov	r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4413      	add	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	440b      	add	r3, r1
 80009b4:	330c      	adds	r3, #12
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	b2d8      	uxtb	r0, r3
 80009bc:	4910      	ldr	r1, [pc, #64]	; (8000a00 <SCH_Dispatch_Tasks+0x7c>)
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	440b      	add	r3, r1
 80009ca:	330c      	adds	r3, #12
 80009cc:	4602      	mov	r2, r0
 80009ce:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 80009d0:	490b      	ldr	r1, [pc, #44]	; (8000a00 <SCH_Dispatch_Tasks+0x7c>)
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4613      	mov	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	440b      	add	r3, r1
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4798      	blx	r3
	for(int i = 0; i < current_index_task; i++){
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	3301      	adds	r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <SCH_Dispatch_Tasks+0x80>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4293      	cmp	r3, r2
 80009f2:	dbcd      	blt.n	8000990 <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000154 	.word	0x20000154
 8000a04:	20000474 	.word	0x20000474

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_MspInit+0x40>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <HAL_MspInit+0x40>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6193      	str	r3, [r2, #24]
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <HAL_MspInit+0x40>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_MspInit+0x40>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_MspInit+0x40>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	61d3      	str	r3, [r2, #28]
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <HAL_MspInit+0x40>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a5c:	d113      	bne.n	8000a86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_TIM_Base_MspInit+0x44>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <HAL_TIM_Base_MspInit+0x44>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_TIM_Base_MspInit+0x44>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	201c      	movs	r0, #28
 8000a7c:	f000 fa69 	bl	8000f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a80:	201c      	movs	r0, #28
 8000a82:	f000 fa82 	bl	8000f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <HAL_UART_MspInit+0x98>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d137      	bne.n	8000b24 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <HAL_UART_MspInit+0x9c>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <HAL_UART_MspInit+0x9c>)
 8000aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abe:	61d3      	str	r3, [r2, #28]
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_UART_MspInit+0x9c>)
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_UART_MspInit+0x9c>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <HAL_UART_MspInit+0x9c>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_UART_MspInit+0x9c>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4619      	mov	r1, r3
 8000af6:	480f      	ldr	r0, [pc, #60]	; (8000b34 <HAL_UART_MspInit+0xa0>)
 8000af8:	f000 fb12 	bl	8001120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000afc:	2308      	movs	r3, #8
 8000afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4809      	ldr	r0, [pc, #36]	; (8000b34 <HAL_UART_MspInit+0xa0>)
 8000b10:	f000 fb06 	bl	8001120 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	2026      	movs	r0, #38	; 0x26
 8000b1a:	f000 fa1a 	bl	8000f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b1e:	2026      	movs	r0, #38	; 0x26
 8000b20:	f000 fa33 	bl	8000f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40010800 	.word	0x40010800

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr

08000b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7e:	f000 f8f5 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <TIM2_IRQHandler+0x10>)
 8000b8e:	f001 f92b 	bl	8001de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000008c 	.word	0x2000008c

08000b9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <USART2_IRQHandler+0x10>)
 8000ba2:	f001 fd49 	bl	8002638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200000d4 	.word	0x200000d4

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f002 f922 	bl	8002e28 <__errno>
 8000be4:	4603      	mov	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <_sbrk+0x64>)
 8000c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20002800 	.word	0x20002800
 8000c10:	00000400 	.word	0x00000400
 8000c14:	20000478 	.word	0x20000478
 8000c18:	20000498 	.word	0x20000498

08000c1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <setTimer1>:
int timer1_counter=0;

int timer2_flag=0;
int timer2_counter=0;

void setTimer1( int duration){
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	timer1_counter=duration/TICK;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <setTimer1+0x2c>)
 8000c34:	fb82 1203 	smull	r1, r2, r2, r3
 8000c38:	1092      	asrs	r2, r2, #2
 8000c3a:	17db      	asrs	r3, r3, #31
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <setTimer1+0x30>)
 8000c40:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <setTimer1+0x34>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	66666667 	.word	0x66666667
 8000c58:	20000480 	.word	0x20000480
 8000c5c:	2000047c 	.word	0x2000047c

08000c60 <timer1_run>:

void timer1_run(){
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <timer1_run+0x2c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	dd0b      	ble.n	8000c84 <timer1_run+0x24>
		timer1_counter--;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <timer1_run+0x2c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <timer1_run+0x2c>)
 8000c74:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0) timer1_flag=1;
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <timer1_run+0x2c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	dc02      	bgt.n	8000c84 <timer1_run+0x24>
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <timer1_run+0x30>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
	}
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	20000480 	.word	0x20000480
 8000c90:	2000047c 	.word	0x2000047c

08000c94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	; (8000ccc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	; (8000cd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cba:	f7ff ffaf 	bl	8000c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f002 f8b9 	bl	8002e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cc2:	f7ff fc3b 	bl	800053c <main>
  bx lr
 8000cc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cd0:	08003834 	.word	0x08003834
  ldr r2, =_sbss
 8000cd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cd8:	20000498 	.word	0x20000498

08000cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_2_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_Init+0x28>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_Init+0x28>)
 8000cea:	f043 0310 	orr.w	r3, r3, #16
 8000cee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f923 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	200f      	movs	r0, #15
 8000cf8:	f000 f808 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff fe84 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40022000 	.word	0x40022000

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_InitTick+0x54>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x58>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f93b 	bl	8000fa6 <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00e      	b.n	8000d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d80a      	bhi.n	8000d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f000 f903 	bl	8000f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <HAL_InitTick+0x5c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000004 	.word	0x20000004

08000d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_IncTick+0x1c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x20>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <HAL_IncTick+0x20>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000484 	.word	0x20000484

08000d90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <HAL_GetTick+0x10>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	20000484 	.word	0x20000484

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db0b      	blt.n	8000e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 021f 	and.w	r2, r3, #31
 8000e20:	4906      	ldr	r1, [pc, #24]	; (8000e3c <__NVIC_EnableIRQ+0x34>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	2001      	movs	r0, #1
 8000e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f7ff ff90 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff2d 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f64:	f7ff ff42 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff ff90 	bl	8000e94 <NVIC_EncodePriority>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff5f 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff35 	bl	8000e08 <__NVIC_EnableIRQ>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffa2 	bl	8000ef8 <SysTick_Config>
 8000fb4:	4603      	mov	r3, r0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b085      	sub	sp, #20
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d008      	beq.n	8000fe6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e020      	b.n	8001028 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 020e 	bic.w	r2, r2, #14
 8000ff4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0201 	bic.w	r2, r2, #1
 8001004:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f202 	lsl.w	r2, r1, r2
 8001014:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001026:	7bfb      	ldrb	r3, [r7, #15]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
	...

08001034 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001046:	2b02      	cmp	r3, #2
 8001048:	d005      	beq.n	8001056 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2204      	movs	r2, #4
 800104e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e051      	b.n	80010fa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 020e 	bic.w	r2, r2, #14
 8001064:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0201 	bic.w	r2, r2, #1
 8001074:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a22      	ldr	r2, [pc, #136]	; (8001104 <HAL_DMA_Abort_IT+0xd0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d029      	beq.n	80010d4 <HAL_DMA_Abort_IT+0xa0>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a20      	ldr	r2, [pc, #128]	; (8001108 <HAL_DMA_Abort_IT+0xd4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d022      	beq.n	80010d0 <HAL_DMA_Abort_IT+0x9c>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a1f      	ldr	r2, [pc, #124]	; (800110c <HAL_DMA_Abort_IT+0xd8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d01a      	beq.n	80010ca <HAL_DMA_Abort_IT+0x96>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <HAL_DMA_Abort_IT+0xdc>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d012      	beq.n	80010c4 <HAL_DMA_Abort_IT+0x90>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <HAL_DMA_Abort_IT+0xe0>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d00a      	beq.n	80010be <HAL_DMA_Abort_IT+0x8a>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <HAL_DMA_Abort_IT+0xe4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d102      	bne.n	80010b8 <HAL_DMA_Abort_IT+0x84>
 80010b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010b6:	e00e      	b.n	80010d6 <HAL_DMA_Abort_IT+0xa2>
 80010b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010bc:	e00b      	b.n	80010d6 <HAL_DMA_Abort_IT+0xa2>
 80010be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c2:	e008      	b.n	80010d6 <HAL_DMA_Abort_IT+0xa2>
 80010c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c8:	e005      	b.n	80010d6 <HAL_DMA_Abort_IT+0xa2>
 80010ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ce:	e002      	b.n	80010d6 <HAL_DMA_Abort_IT+0xa2>
 80010d0:	2310      	movs	r3, #16
 80010d2:	e000      	b.n	80010d6 <HAL_DMA_Abort_IT+0xa2>
 80010d4:	2301      	movs	r3, #1
 80010d6:	4a11      	ldr	r2, [pc, #68]	; (800111c <HAL_DMA_Abort_IT+0xe8>)
 80010d8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	4798      	blx	r3
    } 
  }
  return status;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40020008 	.word	0x40020008
 8001108:	4002001c 	.word	0x4002001c
 800110c:	40020030 	.word	0x40020030
 8001110:	40020044 	.word	0x40020044
 8001114:	40020058 	.word	0x40020058
 8001118:	4002006c 	.word	0x4002006c
 800111c:	40020000 	.word	0x40020000

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b08b      	sub	sp, #44	; 0x2c
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001132:	e161      	b.n	80013f8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001134:	2201      	movs	r2, #1
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	429a      	cmp	r2, r3
 800114e:	f040 8150 	bne.w	80013f2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	4a97      	ldr	r2, [pc, #604]	; (80013b4 <HAL_GPIO_Init+0x294>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d05e      	beq.n	800121a <HAL_GPIO_Init+0xfa>
 800115c:	4a95      	ldr	r2, [pc, #596]	; (80013b4 <HAL_GPIO_Init+0x294>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d875      	bhi.n	800124e <HAL_GPIO_Init+0x12e>
 8001162:	4a95      	ldr	r2, [pc, #596]	; (80013b8 <HAL_GPIO_Init+0x298>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d058      	beq.n	800121a <HAL_GPIO_Init+0xfa>
 8001168:	4a93      	ldr	r2, [pc, #588]	; (80013b8 <HAL_GPIO_Init+0x298>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d86f      	bhi.n	800124e <HAL_GPIO_Init+0x12e>
 800116e:	4a93      	ldr	r2, [pc, #588]	; (80013bc <HAL_GPIO_Init+0x29c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d052      	beq.n	800121a <HAL_GPIO_Init+0xfa>
 8001174:	4a91      	ldr	r2, [pc, #580]	; (80013bc <HAL_GPIO_Init+0x29c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d869      	bhi.n	800124e <HAL_GPIO_Init+0x12e>
 800117a:	4a91      	ldr	r2, [pc, #580]	; (80013c0 <HAL_GPIO_Init+0x2a0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d04c      	beq.n	800121a <HAL_GPIO_Init+0xfa>
 8001180:	4a8f      	ldr	r2, [pc, #572]	; (80013c0 <HAL_GPIO_Init+0x2a0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d863      	bhi.n	800124e <HAL_GPIO_Init+0x12e>
 8001186:	4a8f      	ldr	r2, [pc, #572]	; (80013c4 <HAL_GPIO_Init+0x2a4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d046      	beq.n	800121a <HAL_GPIO_Init+0xfa>
 800118c:	4a8d      	ldr	r2, [pc, #564]	; (80013c4 <HAL_GPIO_Init+0x2a4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d85d      	bhi.n	800124e <HAL_GPIO_Init+0x12e>
 8001192:	2b12      	cmp	r3, #18
 8001194:	d82a      	bhi.n	80011ec <HAL_GPIO_Init+0xcc>
 8001196:	2b12      	cmp	r3, #18
 8001198:	d859      	bhi.n	800124e <HAL_GPIO_Init+0x12e>
 800119a:	a201      	add	r2, pc, #4	; (adr r2, 80011a0 <HAL_GPIO_Init+0x80>)
 800119c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a0:	0800121b 	.word	0x0800121b
 80011a4:	080011f5 	.word	0x080011f5
 80011a8:	08001207 	.word	0x08001207
 80011ac:	08001249 	.word	0x08001249
 80011b0:	0800124f 	.word	0x0800124f
 80011b4:	0800124f 	.word	0x0800124f
 80011b8:	0800124f 	.word	0x0800124f
 80011bc:	0800124f 	.word	0x0800124f
 80011c0:	0800124f 	.word	0x0800124f
 80011c4:	0800124f 	.word	0x0800124f
 80011c8:	0800124f 	.word	0x0800124f
 80011cc:	0800124f 	.word	0x0800124f
 80011d0:	0800124f 	.word	0x0800124f
 80011d4:	0800124f 	.word	0x0800124f
 80011d8:	0800124f 	.word	0x0800124f
 80011dc:	0800124f 	.word	0x0800124f
 80011e0:	0800124f 	.word	0x0800124f
 80011e4:	080011fd 	.word	0x080011fd
 80011e8:	08001211 	.word	0x08001211
 80011ec:	4a76      	ldr	r2, [pc, #472]	; (80013c8 <HAL_GPIO_Init+0x2a8>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011f2:	e02c      	b.n	800124e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	623b      	str	r3, [r7, #32]
          break;
 80011fa:	e029      	b.n	8001250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	3304      	adds	r3, #4
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e024      	b.n	8001250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	3308      	adds	r3, #8
 800120c:	623b      	str	r3, [r7, #32]
          break;
 800120e:	e01f      	b.n	8001250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	330c      	adds	r3, #12
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e01a      	b.n	8001250 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001222:	2304      	movs	r3, #4
 8001224:	623b      	str	r3, [r7, #32]
          break;
 8001226:	e013      	b.n	8001250 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d105      	bne.n	800123c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001230:	2308      	movs	r3, #8
 8001232:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	611a      	str	r2, [r3, #16]
          break;
 800123a:	e009      	b.n	8001250 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800123c:	2308      	movs	r3, #8
 800123e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	615a      	str	r2, [r3, #20]
          break;
 8001246:	e003      	b.n	8001250 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
          break;
 800124c:	e000      	b.n	8001250 <HAL_GPIO_Init+0x130>
          break;
 800124e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2bff      	cmp	r3, #255	; 0xff
 8001254:	d801      	bhi.n	800125a <HAL_GPIO_Init+0x13a>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	e001      	b.n	800125e <HAL_GPIO_Init+0x13e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3304      	adds	r3, #4
 800125e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2bff      	cmp	r3, #255	; 0xff
 8001264:	d802      	bhi.n	800126c <HAL_GPIO_Init+0x14c>
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	e002      	b.n	8001272 <HAL_GPIO_Init+0x152>
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	3b08      	subs	r3, #8
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	210f      	movs	r1, #15
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	401a      	ands	r2, r3
 8001284:	6a39      	ldr	r1, [r7, #32]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	431a      	orrs	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 80a9 	beq.w	80013f2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012a0:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <HAL_GPIO_Init+0x2ac>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a49      	ldr	r2, [pc, #292]	; (80013cc <HAL_GPIO_Init+0x2ac>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_GPIO_Init+0x2ac>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012b8:	4a45      	ldr	r2, [pc, #276]	; (80013d0 <HAL_GPIO_Init+0x2b0>)
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4013      	ands	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a3d      	ldr	r2, [pc, #244]	; (80013d4 <HAL_GPIO_Init+0x2b4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d00d      	beq.n	8001300 <HAL_GPIO_Init+0x1e0>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a3c      	ldr	r2, [pc, #240]	; (80013d8 <HAL_GPIO_Init+0x2b8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d007      	beq.n	80012fc <HAL_GPIO_Init+0x1dc>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a3b      	ldr	r2, [pc, #236]	; (80013dc <HAL_GPIO_Init+0x2bc>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d101      	bne.n	80012f8 <HAL_GPIO_Init+0x1d8>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e004      	b.n	8001302 <HAL_GPIO_Init+0x1e2>
 80012f8:	2303      	movs	r3, #3
 80012fa:	e002      	b.n	8001302 <HAL_GPIO_Init+0x1e2>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <HAL_GPIO_Init+0x1e2>
 8001300:	2300      	movs	r3, #0
 8001302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001304:	f002 0203 	and.w	r2, r2, #3
 8001308:	0092      	lsls	r2, r2, #2
 800130a:	4093      	lsls	r3, r2
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001312:	492f      	ldr	r1, [pc, #188]	; (80013d0 <HAL_GPIO_Init+0x2b0>)
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3302      	adds	r3, #2
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800132c:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	492b      	ldr	r1, [pc, #172]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800133a:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	43db      	mvns	r3, r3
 8001342:	4927      	ldr	r1, [pc, #156]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 8001344:	4013      	ands	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d006      	beq.n	8001362 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4921      	ldr	r1, [pc, #132]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	43db      	mvns	r3, r3
 800136a:	491d      	ldr	r1, [pc, #116]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 800136c:	4013      	ands	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	4917      	ldr	r1, [pc, #92]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	608b      	str	r3, [r1, #8]
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	43db      	mvns	r3, r3
 8001392:	4913      	ldr	r1, [pc, #76]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 8001394:	4013      	ands	r3, r2
 8001396:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d01f      	beq.n	80013e4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	490d      	ldr	r1, [pc, #52]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	60cb      	str	r3, [r1, #12]
 80013b0:	e01f      	b.n	80013f2 <HAL_GPIO_Init+0x2d2>
 80013b2:	bf00      	nop
 80013b4:	10320000 	.word	0x10320000
 80013b8:	10310000 	.word	0x10310000
 80013bc:	10220000 	.word	0x10220000
 80013c0:	10210000 	.word	0x10210000
 80013c4:	10120000 	.word	0x10120000
 80013c8:	10110000 	.word	0x10110000
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010000 	.word	0x40010000
 80013d4:	40010800 	.word	0x40010800
 80013d8:	40010c00 	.word	0x40010c00
 80013dc:	40011000 	.word	0x40011000
 80013e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_GPIO_Init+0x2f4>)
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	4909      	ldr	r1, [pc, #36]	; (8001414 <HAL_GPIO_Init+0x2f4>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	3301      	adds	r3, #1
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	f47f ae96 	bne.w	8001134 <HAL_GPIO_Init+0x14>
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	372c      	adds	r7, #44	; 0x2c
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	40010400 	.word	0x40010400

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	611a      	str	r2, [r3, #16]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4013      	ands	r3, r2
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43d9      	mvns	r1, r3
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	400b      	ands	r3, r1
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	611a      	str	r2, [r3, #16]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
	...

0800147c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e272      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 8087 	beq.w	80015aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800149c:	4b92      	ldr	r3, [pc, #584]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d00c      	beq.n	80014c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014a8:	4b8f      	ldr	r3, [pc, #572]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 030c 	and.w	r3, r3, #12
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d112      	bne.n	80014da <HAL_RCC_OscConfig+0x5e>
 80014b4:	4b8c      	ldr	r3, [pc, #560]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c0:	d10b      	bne.n	80014da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c2:	4b89      	ldr	r3, [pc, #548]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d06c      	beq.n	80015a8 <HAL_RCC_OscConfig+0x12c>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d168      	bne.n	80015a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e24c      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x76>
 80014e4:	4b80      	ldr	r3, [pc, #512]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a7f      	ldr	r2, [pc, #508]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e02e      	b.n	8001550 <HAL_RCC_OscConfig+0xd4>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10c      	bne.n	8001514 <HAL_RCC_OscConfig+0x98>
 80014fa:	4b7b      	ldr	r3, [pc, #492]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a7a      	ldr	r2, [pc, #488]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	4b78      	ldr	r3, [pc, #480]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a77      	ldr	r2, [pc, #476]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800150c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e01d      	b.n	8001550 <HAL_RCC_OscConfig+0xd4>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0xbc>
 800151e:	4b72      	ldr	r3, [pc, #456]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a71      	ldr	r2, [pc, #452]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b6f      	ldr	r3, [pc, #444]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6e      	ldr	r2, [pc, #440]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e00b      	b.n	8001550 <HAL_RCC_OscConfig+0xd4>
 8001538:	4b6b      	ldr	r3, [pc, #428]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a6a      	ldr	r2, [pc, #424]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a67      	ldr	r2, [pc, #412]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fc1a 	bl	8000d90 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fc16 	bl	8000d90 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e200      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0xe4>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fc06 	bl	8000d90 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fc02 	bl	8000d90 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1ec      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x10c>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d063      	beq.n	800167e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015b6:	4b4c      	ldr	r3, [pc, #304]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00b      	beq.n	80015da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015c2:	4b49      	ldr	r3, [pc, #292]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d11c      	bne.n	8001608 <HAL_RCC_OscConfig+0x18c>
 80015ce:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d116      	bne.n	8001608 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	4b43      	ldr	r3, [pc, #268]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <HAL_RCC_OscConfig+0x176>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e1c0      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4939      	ldr	r1, [pc, #228]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	e03a      	b.n	800167e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001610:	4b36      	ldr	r3, [pc, #216]	; (80016ec <HAL_RCC_OscConfig+0x270>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff fbbb 	bl	8000d90 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161e:	f7ff fbb7 	bl	8000d90 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e1a1      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163c:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4927      	ldr	r1, [pc, #156]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
 8001650:	e015      	b.n	800167e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <HAL_RCC_OscConfig+0x270>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fb9a 	bl	8000d90 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001660:	f7ff fb96 	bl	8000d90 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e180      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d03a      	beq.n	8001700 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d019      	beq.n	80016c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <HAL_RCC_OscConfig+0x274>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001698:	f7ff fb7a 	bl	8000d90 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff fb76 	bl	8000d90 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e160      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016be:	2001      	movs	r0, #1
 80016c0:	f000 fad8 	bl	8001c74 <RCC_Delay>
 80016c4:	e01c      	b.n	8001700 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_RCC_OscConfig+0x274>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016cc:	f7ff fb60 	bl	8000d90 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d2:	e00f      	b.n	80016f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff fb5c 	bl	8000d90 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d908      	bls.n	80016f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e146      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	42420000 	.word	0x42420000
 80016f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	4b92      	ldr	r3, [pc, #584]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1e9      	bne.n	80016d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 80a6 	beq.w	800185a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001712:	4b8b      	ldr	r3, [pc, #556]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10d      	bne.n	800173a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b88      	ldr	r3, [pc, #544]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a87      	ldr	r2, [pc, #540]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b85      	ldr	r3, [pc, #532]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001736:	2301      	movs	r3, #1
 8001738:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173a:	4b82      	ldr	r3, [pc, #520]	; (8001944 <HAL_RCC_OscConfig+0x4c8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d118      	bne.n	8001778 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001746:	4b7f      	ldr	r3, [pc, #508]	; (8001944 <HAL_RCC_OscConfig+0x4c8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a7e      	ldr	r2, [pc, #504]	; (8001944 <HAL_RCC_OscConfig+0x4c8>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001752:	f7ff fb1d 	bl	8000d90 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175a:	f7ff fb19 	bl	8000d90 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b64      	cmp	r3, #100	; 0x64
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e103      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	4b75      	ldr	r3, [pc, #468]	; (8001944 <HAL_RCC_OscConfig+0x4c8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x312>
 8001780:	4b6f      	ldr	r3, [pc, #444]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4a6e      	ldr	r2, [pc, #440]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6213      	str	r3, [r2, #32]
 800178c:	e02d      	b.n	80017ea <HAL_RCC_OscConfig+0x36e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x334>
 8001796:	4b6a      	ldr	r3, [pc, #424]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a69      	ldr	r2, [pc, #420]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	6213      	str	r3, [r2, #32]
 80017a2:	4b67      	ldr	r3, [pc, #412]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4a66      	ldr	r2, [pc, #408]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	f023 0304 	bic.w	r3, r3, #4
 80017ac:	6213      	str	r3, [r2, #32]
 80017ae:	e01c      	b.n	80017ea <HAL_RCC_OscConfig+0x36e>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b05      	cmp	r3, #5
 80017b6:	d10c      	bne.n	80017d2 <HAL_RCC_OscConfig+0x356>
 80017b8:	4b61      	ldr	r3, [pc, #388]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4a60      	ldr	r2, [pc, #384]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4a5d      	ldr	r2, [pc, #372]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6213      	str	r3, [r2, #32]
 80017d0:	e00b      	b.n	80017ea <HAL_RCC_OscConfig+0x36e>
 80017d2:	4b5b      	ldr	r3, [pc, #364]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4a5a      	ldr	r2, [pc, #360]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	f023 0301 	bic.w	r3, r3, #1
 80017dc:	6213      	str	r3, [r2, #32]
 80017de:	4b58      	ldr	r3, [pc, #352]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4a57      	ldr	r2, [pc, #348]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	f023 0304 	bic.w	r3, r3, #4
 80017e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d015      	beq.n	800181e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7ff facd 	bl	8000d90 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7ff fac9 	bl	8000d90 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f241 3288 	movw	r2, #5000	; 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e0b1      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001810:	4b4b      	ldr	r3, [pc, #300]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0ee      	beq.n	80017fa <HAL_RCC_OscConfig+0x37e>
 800181c:	e014      	b.n	8001848 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181e:	f7ff fab7 	bl	8000d90 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7ff fab3 	bl	8000d90 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	; 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e09b      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183c:	4b40      	ldr	r3, [pc, #256]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1ee      	bne.n	8001826 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d105      	bne.n	800185a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184e:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a3b      	ldr	r2, [pc, #236]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001858:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8087 	beq.w	8001972 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001864:	4b36      	ldr	r3, [pc, #216]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b08      	cmp	r3, #8
 800186e:	d061      	beq.n	8001934 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d146      	bne.n	8001906 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001878:	4b33      	ldr	r3, [pc, #204]	; (8001948 <HAL_RCC_OscConfig+0x4cc>)
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff fa87 	bl	8000d90 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001886:	f7ff fa83 	bl	8000d90 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e06d      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001898:	4b29      	ldr	r3, [pc, #164]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f0      	bne.n	8001886 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d108      	bne.n	80018c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018ae:	4b24      	ldr	r3, [pc, #144]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	4921      	ldr	r1, [pc, #132]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a19      	ldr	r1, [r3, #32]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	430b      	orrs	r3, r1
 80018d2:	491b      	ldr	r1, [pc, #108]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_RCC_OscConfig+0x4cc>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fa57 	bl	8000d90 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e6:	f7ff fa53 	bl	8000d90 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e03d      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x46a>
 8001904:	e035      	b.n	8001972 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_RCC_OscConfig+0x4cc>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fa40 	bl	8000d90 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff fa3c 	bl	8000d90 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e026      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x498>
 8001932:	e01e      	b.n	8001972 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d107      	bne.n	800194c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e019      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
 8001940:	40021000 	.word	0x40021000
 8001944:	40007000 	.word	0x40007000
 8001948:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_OscConfig+0x500>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	429a      	cmp	r2, r3
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d001      	beq.n	8001972 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0d0      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001994:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <HAL_RCC_ClockConfig+0x1c0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d910      	bls.n	80019c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 0207 	bic.w	r2, r3, #7
 80019aa:	4965      	ldr	r1, [pc, #404]	; (8001b40 <HAL_RCC_ClockConfig+0x1c0>)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <HAL_RCC_ClockConfig+0x1c0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0b8      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d020      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019dc:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a58      	ldr	r2, [pc, #352]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f4:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a00:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	494d      	ldr	r1, [pc, #308]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d040      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d115      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e07f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3e:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e073      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e06b      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5e:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f023 0203 	bic.w	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4936      	ldr	r1, [pc, #216]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a70:	f7ff f98e 	bl	8000d90 <HAL_GetTick>
 8001a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a78:	f7ff f98a 	bl	8000d90 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e053      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8e:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 020c 	and.w	r2, r3, #12
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d1eb      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b27      	ldr	r3, [pc, #156]	; (8001b40 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d210      	bcs.n	8001ad0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 0207 	bic.w	r2, r3, #7
 8001ab6:	4922      	ldr	r1, [pc, #136]	; (8001b40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e032      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4916      	ldr	r1, [pc, #88]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	490e      	ldr	r1, [pc, #56]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b0e:	f000 f821 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 8001b12:	4602      	mov	r2, r0
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	490a      	ldr	r1, [pc, #40]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001b20:	5ccb      	ldrb	r3, [r1, r3]
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <HAL_RCC_ClockConfig+0x1cc>)
 8001b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_RCC_ClockConfig+0x1d0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f8ec 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40022000 	.word	0x40022000
 8001b44:	40021000 	.word	0x40021000
 8001b48:	080037e0 	.word	0x080037e0
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000004 	.word	0x20000004

08001b54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b54:	b490      	push	{r4, r7}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b5a:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b5c:	1d3c      	adds	r4, r7, #4
 8001b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b64:	f240 2301 	movw	r3, #513	; 0x201
 8001b68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d002      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x40>
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0x46>
 8001b92:	e02b      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b94:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b96:	623b      	str	r3, [r7, #32]
      break;
 8001b98:	e02b      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	0c9b      	lsrs	r3, r3, #18
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3328      	adds	r3, #40	; 0x28
 8001ba4:	443b      	add	r3, r7
 8001ba6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001baa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d012      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	0c5b      	lsrs	r3, r3, #17
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	3328      	adds	r3, #40	; 0x28
 8001bc2:	443b      	add	r3, r7
 8001bc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bc8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bce:	fb03 f202 	mul.w	r2, r3, r2
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bda:	e004      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be0:	fb02 f303 	mul.w	r3, r2, r3
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	623b      	str	r3, [r7, #32]
      break;
 8001bea:	e002      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bee:	623b      	str	r3, [r7, #32]
      break;
 8001bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3728      	adds	r7, #40	; 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc90      	pop	{r4, r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	080037d0 	.word	0x080037d0
 8001c04:	40021000 	.word	0x40021000
 8001c08:	007a1200 	.word	0x007a1200
 8001c0c:	003d0900 	.word	0x003d0900

08001c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	20000000 	.word	0x20000000

08001c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c28:	f7ff fff2 	bl	8001c10 <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	080037f0 	.word	0x080037f0

08001c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_RCC_GetHCLKFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	0adb      	lsrs	r3, r3, #11
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4903      	ldr	r1, [pc, #12]	; (8001c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	080037f0 	.word	0x080037f0

08001c74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <RCC_Delay+0x34>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <RCC_Delay+0x38>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	0a5b      	lsrs	r3, r3, #9
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c90:	bf00      	nop
  }
  while (Delay --);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	60fa      	str	r2, [r7, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f9      	bne.n	8001c90 <RCC_Delay+0x1c>
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	10624dd3 	.word	0x10624dd3

08001cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e041      	b.n	8001d46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe feb8 	bl	8000a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3304      	adds	r3, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	4610      	mov	r0, r2
 8001cf0:	f000 fa6a 	bl	80021c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d001      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e035      	b.n	8001dd4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a16      	ldr	r2, [pc, #88]	; (8001de0 <HAL_TIM_Base_Start_IT+0x90>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d009      	beq.n	8001d9e <HAL_TIM_Base_Start_IT+0x4e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d92:	d004      	beq.n	8001d9e <HAL_TIM_Base_Start_IT+0x4e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <HAL_TIM_Base_Start_IT+0x94>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d111      	bne.n	8001dc2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b06      	cmp	r3, #6
 8001dae:	d010      	beq.n	8001dd2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc0:	e007      	b.n	8001dd2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0201 	orr.w	r2, r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40012c00 	.word	0x40012c00
 8001de4:	40000400 	.word	0x40000400

08001de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d122      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d11b      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0202 	mvn.w	r2, #2
 8001e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f9b1 	bl	8002192 <HAL_TIM_IC_CaptureCallback>
 8001e30:	e005      	b.n	8001e3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f9a4 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f9b3 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d122      	bne.n	8001e98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d11b      	bne.n	8001e98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0204 	mvn.w	r2, #4
 8001e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f987 	bl	8002192 <HAL_TIM_IC_CaptureCallback>
 8001e84:	e005      	b.n	8001e92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f97a 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f989 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d122      	bne.n	8001eec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d11b      	bne.n	8001eec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0208 	mvn.w	r2, #8
 8001ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f95d 	bl	8002192 <HAL_TIM_IC_CaptureCallback>
 8001ed8:	e005      	b.n	8001ee6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f950 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f95f 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b10      	cmp	r3, #16
 8001ef8:	d122      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d11b      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0210 	mvn.w	r2, #16
 8001f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2208      	movs	r2, #8
 8001f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f933 	bl	8002192 <HAL_TIM_IC_CaptureCallback>
 8001f2c:	e005      	b.n	8001f3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f926 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f935 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10e      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d107      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0201 	mvn.w	r2, #1
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe fa78 	bl	800045c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f76:	2b80      	cmp	r3, #128	; 0x80
 8001f78:	d10e      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f84:	2b80      	cmp	r3, #128	; 0x80
 8001f86:	d107      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fa67 	bl	8002466 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa2:	2b40      	cmp	r3, #64	; 0x40
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb0:	2b40      	cmp	r3, #64	; 0x40
 8001fb2:	d107      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8f9 	bl	80021b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d107      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0220 	mvn.w	r2, #32
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fa32 	bl	8002454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_TIM_ConfigClockSource+0x18>
 800200c:	2302      	movs	r3, #2
 800200e:	e0b3      	b.n	8002178 <HAL_TIM_ConfigClockSource+0x180>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800202e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002036:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002048:	d03e      	beq.n	80020c8 <HAL_TIM_ConfigClockSource+0xd0>
 800204a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800204e:	f200 8087 	bhi.w	8002160 <HAL_TIM_ConfigClockSource+0x168>
 8002052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002056:	f000 8085 	beq.w	8002164 <HAL_TIM_ConfigClockSource+0x16c>
 800205a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205e:	d87f      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x168>
 8002060:	2b70      	cmp	r3, #112	; 0x70
 8002062:	d01a      	beq.n	800209a <HAL_TIM_ConfigClockSource+0xa2>
 8002064:	2b70      	cmp	r3, #112	; 0x70
 8002066:	d87b      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x168>
 8002068:	2b60      	cmp	r3, #96	; 0x60
 800206a:	d050      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x116>
 800206c:	2b60      	cmp	r3, #96	; 0x60
 800206e:	d877      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x168>
 8002070:	2b50      	cmp	r3, #80	; 0x50
 8002072:	d03c      	beq.n	80020ee <HAL_TIM_ConfigClockSource+0xf6>
 8002074:	2b50      	cmp	r3, #80	; 0x50
 8002076:	d873      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x168>
 8002078:	2b40      	cmp	r3, #64	; 0x40
 800207a:	d058      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x136>
 800207c:	2b40      	cmp	r3, #64	; 0x40
 800207e:	d86f      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x168>
 8002080:	2b30      	cmp	r3, #48	; 0x30
 8002082:	d064      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x156>
 8002084:	2b30      	cmp	r3, #48	; 0x30
 8002086:	d86b      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x168>
 8002088:	2b20      	cmp	r3, #32
 800208a:	d060      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x156>
 800208c:	2b20      	cmp	r3, #32
 800208e:	d867      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x168>
 8002090:	2b00      	cmp	r3, #0
 8002092:	d05c      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x156>
 8002094:	2b10      	cmp	r3, #16
 8002096:	d05a      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002098:	e062      	b.n	8002160 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6899      	ldr	r1, [r3, #8]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f000 f95c 	bl	8002366 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	609a      	str	r2, [r3, #8]
      break;
 80020c6:	e04e      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6899      	ldr	r1, [r3, #8]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f000 f945 	bl	8002366 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ea:	609a      	str	r2, [r3, #8]
      break;
 80020ec:	e03b      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6859      	ldr	r1, [r3, #4]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	461a      	mov	r2, r3
 80020fc:	f000 f8bc 	bl	8002278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2150      	movs	r1, #80	; 0x50
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f913 	bl	8002332 <TIM_ITRx_SetConfig>
      break;
 800210c:	e02b      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6859      	ldr	r1, [r3, #4]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	461a      	mov	r2, r3
 800211c:	f000 f8da 	bl	80022d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2160      	movs	r1, #96	; 0x60
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f903 	bl	8002332 <TIM_ITRx_SetConfig>
      break;
 800212c:	e01b      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	461a      	mov	r2, r3
 800213c:	f000 f89c 	bl	8002278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2140      	movs	r1, #64	; 0x40
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f8f3 	bl	8002332 <TIM_ITRx_SetConfig>
      break;
 800214c:	e00b      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4619      	mov	r1, r3
 8002158:	4610      	mov	r0, r2
 800215a:	f000 f8ea 	bl	8002332 <TIM_ITRx_SetConfig>
        break;
 800215e:	e002      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002160:	bf00      	nop
 8002162:	e000      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002164:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a25      	ldr	r2, [pc, #148]	; (8002270 <TIM_Base_SetConfig+0xa8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d007      	beq.n	80021f0 <TIM_Base_SetConfig+0x28>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e6:	d003      	beq.n	80021f0 <TIM_Base_SetConfig+0x28>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a22      	ldr	r2, [pc, #136]	; (8002274 <TIM_Base_SetConfig+0xac>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d108      	bne.n	8002202 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <TIM_Base_SetConfig+0xa8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <TIM_Base_SetConfig+0x52>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002210:	d003      	beq.n	800221a <TIM_Base_SetConfig+0x52>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a17      	ldr	r2, [pc, #92]	; (8002274 <TIM_Base_SetConfig+0xac>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d108      	bne.n	800222c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a07      	ldr	r2, [pc, #28]	; (8002270 <TIM_Base_SetConfig+0xa8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d103      	bne.n	8002260 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	615a      	str	r2, [r3, #20]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	40012c00 	.word	0x40012c00
 8002274:	40000400 	.word	0x40000400

08002278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	f023 0201 	bic.w	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f023 030a 	bic.w	r3, r3, #10
 80022b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	621a      	str	r2, [r3, #32]
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f023 0210 	bic.w	r2, r3, #16
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	031b      	lsls	r3, r3, #12
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002310:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	621a      	str	r2, [r3, #32]
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	f043 0307 	orr.w	r3, r3, #7
 8002354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	609a      	str	r2, [r3, #8]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002366:	b480      	push	{r7}
 8002368:	b087      	sub	sp, #28
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002380:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	021a      	lsls	r2, r3, #8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	4313      	orrs	r3, r2
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	609a      	str	r2, [r3, #8]
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e041      	b.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a14      	ldr	r2, [pc, #80]	; (800244c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d009      	beq.n	8002414 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002408:	d004      	beq.n	8002414 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d10c      	bne.n	800242e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800241a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	4313      	orrs	r3, r2
 8002424:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40012c00 	.word	0x40012c00
 8002450:	40000400 	.word	0x40000400

08002454 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e03f      	b.n	800250a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe faf8 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2224      	movs	r2, #36	; 0x24
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fc25 	bl	8002d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b08a      	sub	sp, #40	; 0x28
 8002516:	af02      	add	r7, sp, #8
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	4613      	mov	r3, r2
 8002520:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b20      	cmp	r3, #32
 8002530:	d17c      	bne.n	800262c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_UART_Transmit+0x2c>
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e075      	b.n	800262e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_UART_Transmit+0x3e>
 800254c:	2302      	movs	r3, #2
 800254e:	e06e      	b.n	800262e <HAL_UART_Transmit+0x11c>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2221      	movs	r2, #33	; 0x21
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002566:	f7fe fc13 	bl	8000d90 <HAL_GetTick>
 800256a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	88fa      	ldrh	r2, [r7, #6]
 8002570:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	88fa      	ldrh	r2, [r7, #6]
 8002576:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002580:	d108      	bne.n	8002594 <HAL_UART_Transmit+0x82>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d104      	bne.n	8002594 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	e003      	b.n	800259c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025a4:	e02a      	b.n	80025fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2180      	movs	r1, #128	; 0x80
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fa11 	bl	80029d8 <UART_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e036      	b.n	800262e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10b      	bne.n	80025de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	3302      	adds	r3, #2
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	e007      	b.n	80025ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	3301      	adds	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1cf      	bne.n	80025a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2200      	movs	r2, #0
 800260e:	2140      	movs	r1, #64	; 0x40
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f9e1 	bl	80029d8 <UART_WaitOnFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e006      	b.n	800262e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	e000      	b.n	800262e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800262c:	2302      	movs	r3, #2
  }
}
 800262e:	4618      	mov	r0, r3
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002658:	2300      	movs	r3, #0
 800265a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10d      	bne.n	800268a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_UART_IRQHandler+0x52>
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fa99 	bl	8002bba <UART_Receive_IT>
      return;
 8002688:	e17b      	b.n	8002982 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80b1 	beq.w	80027f4 <HAL_UART_IRQHandler+0x1bc>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d105      	bne.n	80026a8 <HAL_UART_IRQHandler+0x70>
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80a6 	beq.w	80027f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_UART_IRQHandler+0x90>
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_UART_IRQHandler+0xb0>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f043 0202 	orr.w	r2, r3, #2
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_UART_IRQHandler+0xd0>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f043 0204 	orr.w	r2, r3, #4
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00f      	beq.n	8002732 <HAL_UART_IRQHandler+0xfa>
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d104      	bne.n	8002726 <HAL_UART_IRQHandler+0xee>
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f043 0208 	orr.w	r2, r3, #8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 811e 	beq.w	8002978 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_UART_IRQHandler+0x11e>
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fa32 	bl	8002bba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2300      	moveq	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <HAL_UART_IRQHandler+0x146>
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d031      	beq.n	80027e2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f974 	bl	8002a6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d023      	beq.n	80027da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d013      	beq.n	80027d2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	4a76      	ldr	r2, [pc, #472]	; (8002988 <HAL_UART_IRQHandler+0x350>)
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fc3c 	bl	8001034 <HAL_DMA_Abort_IT>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d016      	beq.n	80027f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027cc:	4610      	mov	r0, r2
 80027ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d0:	e00e      	b.n	80027f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8ec 	bl	80029b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d8:	e00a      	b.n	80027f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8e8 	bl	80029b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e0:	e006      	b.n	80027f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f8e4 	bl	80029b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027ee:	e0c3      	b.n	8002978 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f0:	bf00      	nop
    return;
 80027f2:	e0c1      	b.n	8002978 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	f040 80a1 	bne.w	8002940 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 809b 	beq.w	8002940 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8095 	beq.w	8002940 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d04e      	beq.n	80028d8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002844:	8a3b      	ldrh	r3, [r7, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8098 	beq.w	800297c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002850:	8a3a      	ldrh	r2, [r7, #16]
 8002852:	429a      	cmp	r2, r3
 8002854:	f080 8092 	bcs.w	800297c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8a3a      	ldrh	r2, [r7, #16]
 800285c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b20      	cmp	r3, #32
 8002866:	d02b      	beq.n	80028c0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002876:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002896:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0210 	bic.w	r2, r2, #16
 80028b4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fb7f 	bl	8000fbe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	4619      	mov	r1, r3
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f876 	bl	80029c2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80028d6:	e051      	b.n	800297c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d047      	beq.n	8002980 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80028f0:	8a7b      	ldrh	r3, [r7, #18]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d044      	beq.n	8002980 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002904:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0210 	bic.w	r2, r2, #16
 8002932:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002934:	8a7b      	ldrh	r3, [r7, #18]
 8002936:	4619      	mov	r1, r3
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f842 	bl	80029c2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800293e:	e01f      	b.n	8002980 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <HAL_UART_IRQHandler+0x324>
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f8c9 	bl	8002aec <UART_Transmit_IT>
    return;
 800295a:	e012      	b.n	8002982 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00d      	beq.n	8002982 <HAL_UART_IRQHandler+0x34a>
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f90a 	bl	8002b8a <UART_EndTransmit_IT>
    return;
 8002976:	e004      	b.n	8002982 <HAL_UART_IRQHandler+0x34a>
    return;
 8002978:	bf00      	nop
 800297a:	e002      	b.n	8002982 <HAL_UART_IRQHandler+0x34a>
      return;
 800297c:	bf00      	nop
 800297e:	e000      	b.n	8002982 <HAL_UART_IRQHandler+0x34a>
      return;
 8002980:	bf00      	nop
  }
}
 8002982:	3728      	adds	r7, #40	; 0x28
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	08002ac5 	.word	0x08002ac5

0800298c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e8:	e02c      	b.n	8002a44 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d028      	beq.n	8002a44 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <UART_WaitOnFlagUntilTimeout+0x30>
 80029f8:	f7fe f9ca 	bl	8000d90 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d21d      	bcs.n	8002a44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a16:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e00f      	b.n	8002a64 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d0c3      	beq.n	80029ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0210 	bic.w	r2, r2, #16
 8002aaa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f7ff ff66 	bl	80029b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b21      	cmp	r3, #33	; 0x21
 8002afe:	d13e      	bne.n	8002b7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b08:	d114      	bne.n	8002b34 <UART_Transmit_IT+0x48>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d110      	bne.n	8002b34 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	1c9a      	adds	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	621a      	str	r2, [r3, #32]
 8002b32:	e008      	b.n	8002b46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	1c59      	adds	r1, r3, #1
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6211      	str	r1, [r2, #32]
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4619      	mov	r1, r3
 8002b54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10f      	bne.n	8002b7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
  }
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff feee 	bl	800298c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b22      	cmp	r3, #34	; 0x22
 8002bcc:	f040 8099 	bne.w	8002d02 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd8:	d117      	bne.n	8002c0a <UART_Receive_IT+0x50>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d113      	bne.n	8002c0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	1c9a      	adds	r2, r3, #2
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28
 8002c08:	e026      	b.n	8002c58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1c:	d007      	beq.n	8002c2e <UART_Receive_IT+0x74>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <UART_Receive_IT+0x82>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e008      	b.n	8002c4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4619      	mov	r1, r3
 8002c66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d148      	bne.n	8002cfe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0220 	bic.w	r2, r2, #32
 8002c7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d123      	bne.n	8002cf4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0210 	bic.w	r2, r2, #16
 8002cc0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b10      	cmp	r3, #16
 8002cce:	d10a      	bne.n	8002ce6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cea:	4619      	mov	r1, r3
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff fe68 	bl	80029c2 <HAL_UARTEx_RxEventCallback>
 8002cf2:	e002      	b.n	8002cfa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff fe52 	bl	800299e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e002      	b.n	8002d04 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e000      	b.n	8002d04 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
  }
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d46:	f023 030c 	bic.w	r3, r3, #12
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2c      	ldr	r2, [pc, #176]	; (8002e20 <UART_SetConfig+0x114>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d103      	bne.n	8002d7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d74:	f7fe ff6a 	bl	8001c4c <HAL_RCC_GetPCLK2Freq>
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	e002      	b.n	8002d82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d7c:	f7fe ff52 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8002d80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	009a      	lsls	r2, r3, #2
 8002d8c:	441a      	add	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <UART_SetConfig+0x118>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	0119      	lsls	r1, r3, #4
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	009a      	lsls	r2, r3, #2
 8002dac:	441a      	add	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db8:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <UART_SetConfig+0x118>)
 8002dba:	fba3 0302 	umull	r0, r3, r3, r2
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2064      	movs	r0, #100	; 0x64
 8002dc2:	fb00 f303 	mul.w	r3, r0, r3
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	3332      	adds	r3, #50	; 0x32
 8002dcc:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <UART_SetConfig+0x118>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd8:	4419      	add	r1, r3
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009a      	lsls	r2, r3, #2
 8002de4:	441a      	add	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <UART_SetConfig+0x118>)
 8002df2:	fba3 0302 	umull	r0, r3, r3, r2
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2064      	movs	r0, #100	; 0x64
 8002dfa:	fb00 f303 	mul.w	r3, r0, r3
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	3332      	adds	r3, #50	; 0x32
 8002e04:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <UART_SetConfig+0x118>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	f003 020f 	and.w	r2, r3, #15
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	440a      	add	r2, r1
 8002e16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40013800 	.word	0x40013800
 8002e24:	51eb851f 	.word	0x51eb851f

08002e28 <__errno>:
 8002e28:	4b01      	ldr	r3, [pc, #4]	; (8002e30 <__errno+0x8>)
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	2000000c 	.word	0x2000000c

08002e34 <__libc_init_array>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	2600      	movs	r6, #0
 8002e38:	4d0c      	ldr	r5, [pc, #48]	; (8002e6c <__libc_init_array+0x38>)
 8002e3a:	4c0d      	ldr	r4, [pc, #52]	; (8002e70 <__libc_init_array+0x3c>)
 8002e3c:	1b64      	subs	r4, r4, r5
 8002e3e:	10a4      	asrs	r4, r4, #2
 8002e40:	42a6      	cmp	r6, r4
 8002e42:	d109      	bne.n	8002e58 <__libc_init_array+0x24>
 8002e44:	f000 fc9c 	bl	8003780 <_init>
 8002e48:	2600      	movs	r6, #0
 8002e4a:	4d0a      	ldr	r5, [pc, #40]	; (8002e74 <__libc_init_array+0x40>)
 8002e4c:	4c0a      	ldr	r4, [pc, #40]	; (8002e78 <__libc_init_array+0x44>)
 8002e4e:	1b64      	subs	r4, r4, r5
 8002e50:	10a4      	asrs	r4, r4, #2
 8002e52:	42a6      	cmp	r6, r4
 8002e54:	d105      	bne.n	8002e62 <__libc_init_array+0x2e>
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
 8002e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e5c:	4798      	blx	r3
 8002e5e:	3601      	adds	r6, #1
 8002e60:	e7ee      	b.n	8002e40 <__libc_init_array+0xc>
 8002e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e66:	4798      	blx	r3
 8002e68:	3601      	adds	r6, #1
 8002e6a:	e7f2      	b.n	8002e52 <__libc_init_array+0x1e>
 8002e6c:	0800382c 	.word	0x0800382c
 8002e70:	0800382c 	.word	0x0800382c
 8002e74:	0800382c 	.word	0x0800382c
 8002e78:	08003830 	.word	0x08003830

08002e7c <memset>:
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4402      	add	r2, r0
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d100      	bne.n	8002e86 <memset+0xa>
 8002e84:	4770      	bx	lr
 8002e86:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8a:	e7f9      	b.n	8002e80 <memset+0x4>

08002e8c <siprintf>:
 8002e8c:	b40e      	push	{r1, r2, r3}
 8002e8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e92:	b500      	push	{lr}
 8002e94:	b09c      	sub	sp, #112	; 0x70
 8002e96:	ab1d      	add	r3, sp, #116	; 0x74
 8002e98:	9002      	str	r0, [sp, #8]
 8002e9a:	9006      	str	r0, [sp, #24]
 8002e9c:	9107      	str	r1, [sp, #28]
 8002e9e:	9104      	str	r1, [sp, #16]
 8002ea0:	4808      	ldr	r0, [pc, #32]	; (8002ec4 <siprintf+0x38>)
 8002ea2:	4909      	ldr	r1, [pc, #36]	; (8002ec8 <siprintf+0x3c>)
 8002ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ea8:	9105      	str	r1, [sp, #20]
 8002eaa:	6800      	ldr	r0, [r0, #0]
 8002eac:	a902      	add	r1, sp, #8
 8002eae:	9301      	str	r3, [sp, #4]
 8002eb0:	f000 f868 	bl	8002f84 <_svfiprintf_r>
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	9b02      	ldr	r3, [sp, #8]
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	b01c      	add	sp, #112	; 0x70
 8002ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ec0:	b003      	add	sp, #12
 8002ec2:	4770      	bx	lr
 8002ec4:	2000000c 	.word	0x2000000c
 8002ec8:	ffff0208 	.word	0xffff0208

08002ecc <__ssputs_r>:
 8002ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ed0:	688e      	ldr	r6, [r1, #8]
 8002ed2:	4682      	mov	sl, r0
 8002ed4:	429e      	cmp	r6, r3
 8002ed6:	460c      	mov	r4, r1
 8002ed8:	4690      	mov	r8, r2
 8002eda:	461f      	mov	r7, r3
 8002edc:	d838      	bhi.n	8002f50 <__ssputs_r+0x84>
 8002ede:	898a      	ldrh	r2, [r1, #12]
 8002ee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ee4:	d032      	beq.n	8002f4c <__ssputs_r+0x80>
 8002ee6:	6825      	ldr	r5, [r4, #0]
 8002ee8:	6909      	ldr	r1, [r1, #16]
 8002eea:	3301      	adds	r3, #1
 8002eec:	eba5 0901 	sub.w	r9, r5, r1
 8002ef0:	6965      	ldr	r5, [r4, #20]
 8002ef2:	444b      	add	r3, r9
 8002ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002efc:	106d      	asrs	r5, r5, #1
 8002efe:	429d      	cmp	r5, r3
 8002f00:	bf38      	it	cc
 8002f02:	461d      	movcc	r5, r3
 8002f04:	0553      	lsls	r3, r2, #21
 8002f06:	d531      	bpl.n	8002f6c <__ssputs_r+0xa0>
 8002f08:	4629      	mov	r1, r5
 8002f0a:	f000 fb6f 	bl	80035ec <_malloc_r>
 8002f0e:	4606      	mov	r6, r0
 8002f10:	b950      	cbnz	r0, 8002f28 <__ssputs_r+0x5c>
 8002f12:	230c      	movs	r3, #12
 8002f14:	f04f 30ff 	mov.w	r0, #4294967295
 8002f18:	f8ca 3000 	str.w	r3, [sl]
 8002f1c:	89a3      	ldrh	r3, [r4, #12]
 8002f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f22:	81a3      	strh	r3, [r4, #12]
 8002f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f28:	464a      	mov	r2, r9
 8002f2a:	6921      	ldr	r1, [r4, #16]
 8002f2c:	f000 face 	bl	80034cc <memcpy>
 8002f30:	89a3      	ldrh	r3, [r4, #12]
 8002f32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3a:	81a3      	strh	r3, [r4, #12]
 8002f3c:	6126      	str	r6, [r4, #16]
 8002f3e:	444e      	add	r6, r9
 8002f40:	6026      	str	r6, [r4, #0]
 8002f42:	463e      	mov	r6, r7
 8002f44:	6165      	str	r5, [r4, #20]
 8002f46:	eba5 0509 	sub.w	r5, r5, r9
 8002f4a:	60a5      	str	r5, [r4, #8]
 8002f4c:	42be      	cmp	r6, r7
 8002f4e:	d900      	bls.n	8002f52 <__ssputs_r+0x86>
 8002f50:	463e      	mov	r6, r7
 8002f52:	4632      	mov	r2, r6
 8002f54:	4641      	mov	r1, r8
 8002f56:	6820      	ldr	r0, [r4, #0]
 8002f58:	f000 fac6 	bl	80034e8 <memmove>
 8002f5c:	68a3      	ldr	r3, [r4, #8]
 8002f5e:	2000      	movs	r0, #0
 8002f60:	1b9b      	subs	r3, r3, r6
 8002f62:	60a3      	str	r3, [r4, #8]
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	4433      	add	r3, r6
 8002f68:	6023      	str	r3, [r4, #0]
 8002f6a:	e7db      	b.n	8002f24 <__ssputs_r+0x58>
 8002f6c:	462a      	mov	r2, r5
 8002f6e:	f000 fbb1 	bl	80036d4 <_realloc_r>
 8002f72:	4606      	mov	r6, r0
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d1e1      	bne.n	8002f3c <__ssputs_r+0x70>
 8002f78:	4650      	mov	r0, sl
 8002f7a:	6921      	ldr	r1, [r4, #16]
 8002f7c:	f000 face 	bl	800351c <_free_r>
 8002f80:	e7c7      	b.n	8002f12 <__ssputs_r+0x46>
	...

08002f84 <_svfiprintf_r>:
 8002f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f88:	4698      	mov	r8, r3
 8002f8a:	898b      	ldrh	r3, [r1, #12]
 8002f8c:	4607      	mov	r7, r0
 8002f8e:	061b      	lsls	r3, r3, #24
 8002f90:	460d      	mov	r5, r1
 8002f92:	4614      	mov	r4, r2
 8002f94:	b09d      	sub	sp, #116	; 0x74
 8002f96:	d50e      	bpl.n	8002fb6 <_svfiprintf_r+0x32>
 8002f98:	690b      	ldr	r3, [r1, #16]
 8002f9a:	b963      	cbnz	r3, 8002fb6 <_svfiprintf_r+0x32>
 8002f9c:	2140      	movs	r1, #64	; 0x40
 8002f9e:	f000 fb25 	bl	80035ec <_malloc_r>
 8002fa2:	6028      	str	r0, [r5, #0]
 8002fa4:	6128      	str	r0, [r5, #16]
 8002fa6:	b920      	cbnz	r0, 8002fb2 <_svfiprintf_r+0x2e>
 8002fa8:	230c      	movs	r3, #12
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb0:	e0d1      	b.n	8003156 <_svfiprintf_r+0x1d2>
 8002fb2:	2340      	movs	r3, #64	; 0x40
 8002fb4:	616b      	str	r3, [r5, #20]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8002fba:	2320      	movs	r3, #32
 8002fbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fc0:	2330      	movs	r3, #48	; 0x30
 8002fc2:	f04f 0901 	mov.w	r9, #1
 8002fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003170 <_svfiprintf_r+0x1ec>
 8002fce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fd2:	4623      	mov	r3, r4
 8002fd4:	469a      	mov	sl, r3
 8002fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fda:	b10a      	cbz	r2, 8002fe0 <_svfiprintf_r+0x5c>
 8002fdc:	2a25      	cmp	r2, #37	; 0x25
 8002fde:	d1f9      	bne.n	8002fd4 <_svfiprintf_r+0x50>
 8002fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8002fe4:	d00b      	beq.n	8002ffe <_svfiprintf_r+0x7a>
 8002fe6:	465b      	mov	r3, fp
 8002fe8:	4622      	mov	r2, r4
 8002fea:	4629      	mov	r1, r5
 8002fec:	4638      	mov	r0, r7
 8002fee:	f7ff ff6d 	bl	8002ecc <__ssputs_r>
 8002ff2:	3001      	adds	r0, #1
 8002ff4:	f000 80aa 	beq.w	800314c <_svfiprintf_r+0x1c8>
 8002ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ffa:	445a      	add	r2, fp
 8002ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8002ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80a2 	beq.w	800314c <_svfiprintf_r+0x1c8>
 8003008:	2300      	movs	r3, #0
 800300a:	f04f 32ff 	mov.w	r2, #4294967295
 800300e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003012:	f10a 0a01 	add.w	sl, sl, #1
 8003016:	9304      	str	r3, [sp, #16]
 8003018:	9307      	str	r3, [sp, #28]
 800301a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800301e:	931a      	str	r3, [sp, #104]	; 0x68
 8003020:	4654      	mov	r4, sl
 8003022:	2205      	movs	r2, #5
 8003024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003028:	4851      	ldr	r0, [pc, #324]	; (8003170 <_svfiprintf_r+0x1ec>)
 800302a:	f000 fa41 	bl	80034b0 <memchr>
 800302e:	9a04      	ldr	r2, [sp, #16]
 8003030:	b9d8      	cbnz	r0, 800306a <_svfiprintf_r+0xe6>
 8003032:	06d0      	lsls	r0, r2, #27
 8003034:	bf44      	itt	mi
 8003036:	2320      	movmi	r3, #32
 8003038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800303c:	0711      	lsls	r1, r2, #28
 800303e:	bf44      	itt	mi
 8003040:	232b      	movmi	r3, #43	; 0x2b
 8003042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003046:	f89a 3000 	ldrb.w	r3, [sl]
 800304a:	2b2a      	cmp	r3, #42	; 0x2a
 800304c:	d015      	beq.n	800307a <_svfiprintf_r+0xf6>
 800304e:	4654      	mov	r4, sl
 8003050:	2000      	movs	r0, #0
 8003052:	f04f 0c0a 	mov.w	ip, #10
 8003056:	9a07      	ldr	r2, [sp, #28]
 8003058:	4621      	mov	r1, r4
 800305a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800305e:	3b30      	subs	r3, #48	; 0x30
 8003060:	2b09      	cmp	r3, #9
 8003062:	d94e      	bls.n	8003102 <_svfiprintf_r+0x17e>
 8003064:	b1b0      	cbz	r0, 8003094 <_svfiprintf_r+0x110>
 8003066:	9207      	str	r2, [sp, #28]
 8003068:	e014      	b.n	8003094 <_svfiprintf_r+0x110>
 800306a:	eba0 0308 	sub.w	r3, r0, r8
 800306e:	fa09 f303 	lsl.w	r3, r9, r3
 8003072:	4313      	orrs	r3, r2
 8003074:	46a2      	mov	sl, r4
 8003076:	9304      	str	r3, [sp, #16]
 8003078:	e7d2      	b.n	8003020 <_svfiprintf_r+0x9c>
 800307a:	9b03      	ldr	r3, [sp, #12]
 800307c:	1d19      	adds	r1, r3, #4
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	9103      	str	r1, [sp, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	bfbb      	ittet	lt
 8003086:	425b      	neglt	r3, r3
 8003088:	f042 0202 	orrlt.w	r2, r2, #2
 800308c:	9307      	strge	r3, [sp, #28]
 800308e:	9307      	strlt	r3, [sp, #28]
 8003090:	bfb8      	it	lt
 8003092:	9204      	strlt	r2, [sp, #16]
 8003094:	7823      	ldrb	r3, [r4, #0]
 8003096:	2b2e      	cmp	r3, #46	; 0x2e
 8003098:	d10c      	bne.n	80030b4 <_svfiprintf_r+0x130>
 800309a:	7863      	ldrb	r3, [r4, #1]
 800309c:	2b2a      	cmp	r3, #42	; 0x2a
 800309e:	d135      	bne.n	800310c <_svfiprintf_r+0x188>
 80030a0:	9b03      	ldr	r3, [sp, #12]
 80030a2:	3402      	adds	r4, #2
 80030a4:	1d1a      	adds	r2, r3, #4
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	9203      	str	r2, [sp, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bfb8      	it	lt
 80030ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80030b2:	9305      	str	r3, [sp, #20]
 80030b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003174 <_svfiprintf_r+0x1f0>
 80030b8:	2203      	movs	r2, #3
 80030ba:	4650      	mov	r0, sl
 80030bc:	7821      	ldrb	r1, [r4, #0]
 80030be:	f000 f9f7 	bl	80034b0 <memchr>
 80030c2:	b140      	cbz	r0, 80030d6 <_svfiprintf_r+0x152>
 80030c4:	2340      	movs	r3, #64	; 0x40
 80030c6:	eba0 000a 	sub.w	r0, r0, sl
 80030ca:	fa03 f000 	lsl.w	r0, r3, r0
 80030ce:	9b04      	ldr	r3, [sp, #16]
 80030d0:	3401      	adds	r4, #1
 80030d2:	4303      	orrs	r3, r0
 80030d4:	9304      	str	r3, [sp, #16]
 80030d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030da:	2206      	movs	r2, #6
 80030dc:	4826      	ldr	r0, [pc, #152]	; (8003178 <_svfiprintf_r+0x1f4>)
 80030de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030e2:	f000 f9e5 	bl	80034b0 <memchr>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d038      	beq.n	800315c <_svfiprintf_r+0x1d8>
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <_svfiprintf_r+0x1f8>)
 80030ec:	bb1b      	cbnz	r3, 8003136 <_svfiprintf_r+0x1b2>
 80030ee:	9b03      	ldr	r3, [sp, #12]
 80030f0:	3307      	adds	r3, #7
 80030f2:	f023 0307 	bic.w	r3, r3, #7
 80030f6:	3308      	adds	r3, #8
 80030f8:	9303      	str	r3, [sp, #12]
 80030fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030fc:	4433      	add	r3, r6
 80030fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003100:	e767      	b.n	8002fd2 <_svfiprintf_r+0x4e>
 8003102:	460c      	mov	r4, r1
 8003104:	2001      	movs	r0, #1
 8003106:	fb0c 3202 	mla	r2, ip, r2, r3
 800310a:	e7a5      	b.n	8003058 <_svfiprintf_r+0xd4>
 800310c:	2300      	movs	r3, #0
 800310e:	f04f 0c0a 	mov.w	ip, #10
 8003112:	4619      	mov	r1, r3
 8003114:	3401      	adds	r4, #1
 8003116:	9305      	str	r3, [sp, #20]
 8003118:	4620      	mov	r0, r4
 800311a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800311e:	3a30      	subs	r2, #48	; 0x30
 8003120:	2a09      	cmp	r2, #9
 8003122:	d903      	bls.n	800312c <_svfiprintf_r+0x1a8>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0c5      	beq.n	80030b4 <_svfiprintf_r+0x130>
 8003128:	9105      	str	r1, [sp, #20]
 800312a:	e7c3      	b.n	80030b4 <_svfiprintf_r+0x130>
 800312c:	4604      	mov	r4, r0
 800312e:	2301      	movs	r3, #1
 8003130:	fb0c 2101 	mla	r1, ip, r1, r2
 8003134:	e7f0      	b.n	8003118 <_svfiprintf_r+0x194>
 8003136:	ab03      	add	r3, sp, #12
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	462a      	mov	r2, r5
 800313c:	4638      	mov	r0, r7
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <_svfiprintf_r+0x1fc>)
 8003140:	a904      	add	r1, sp, #16
 8003142:	f3af 8000 	nop.w
 8003146:	1c42      	adds	r2, r0, #1
 8003148:	4606      	mov	r6, r0
 800314a:	d1d6      	bne.n	80030fa <_svfiprintf_r+0x176>
 800314c:	89ab      	ldrh	r3, [r5, #12]
 800314e:	065b      	lsls	r3, r3, #25
 8003150:	f53f af2c 	bmi.w	8002fac <_svfiprintf_r+0x28>
 8003154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003156:	b01d      	add	sp, #116	; 0x74
 8003158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800315c:	ab03      	add	r3, sp, #12
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	462a      	mov	r2, r5
 8003162:	4638      	mov	r0, r7
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <_svfiprintf_r+0x1fc>)
 8003166:	a904      	add	r1, sp, #16
 8003168:	f000 f87c 	bl	8003264 <_printf_i>
 800316c:	e7eb      	b.n	8003146 <_svfiprintf_r+0x1c2>
 800316e:	bf00      	nop
 8003170:	080037f8 	.word	0x080037f8
 8003174:	080037fe 	.word	0x080037fe
 8003178:	08003802 	.word	0x08003802
 800317c:	00000000 	.word	0x00000000
 8003180:	08002ecd 	.word	0x08002ecd

08003184 <_printf_common>:
 8003184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003188:	4616      	mov	r6, r2
 800318a:	4699      	mov	r9, r3
 800318c:	688a      	ldr	r2, [r1, #8]
 800318e:	690b      	ldr	r3, [r1, #16]
 8003190:	4607      	mov	r7, r0
 8003192:	4293      	cmp	r3, r2
 8003194:	bfb8      	it	lt
 8003196:	4613      	movlt	r3, r2
 8003198:	6033      	str	r3, [r6, #0]
 800319a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800319e:	460c      	mov	r4, r1
 80031a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031a4:	b10a      	cbz	r2, 80031aa <_printf_common+0x26>
 80031a6:	3301      	adds	r3, #1
 80031a8:	6033      	str	r3, [r6, #0]
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	0699      	lsls	r1, r3, #26
 80031ae:	bf42      	ittt	mi
 80031b0:	6833      	ldrmi	r3, [r6, #0]
 80031b2:	3302      	addmi	r3, #2
 80031b4:	6033      	strmi	r3, [r6, #0]
 80031b6:	6825      	ldr	r5, [r4, #0]
 80031b8:	f015 0506 	ands.w	r5, r5, #6
 80031bc:	d106      	bne.n	80031cc <_printf_common+0x48>
 80031be:	f104 0a19 	add.w	sl, r4, #25
 80031c2:	68e3      	ldr	r3, [r4, #12]
 80031c4:	6832      	ldr	r2, [r6, #0]
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	42ab      	cmp	r3, r5
 80031ca:	dc28      	bgt.n	800321e <_printf_common+0x9a>
 80031cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031d0:	1e13      	subs	r3, r2, #0
 80031d2:	6822      	ldr	r2, [r4, #0]
 80031d4:	bf18      	it	ne
 80031d6:	2301      	movne	r3, #1
 80031d8:	0692      	lsls	r2, r2, #26
 80031da:	d42d      	bmi.n	8003238 <_printf_common+0xb4>
 80031dc:	4649      	mov	r1, r9
 80031de:	4638      	mov	r0, r7
 80031e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031e4:	47c0      	blx	r8
 80031e6:	3001      	adds	r0, #1
 80031e8:	d020      	beq.n	800322c <_printf_common+0xa8>
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	68e5      	ldr	r5, [r4, #12]
 80031ee:	f003 0306 	and.w	r3, r3, #6
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	bf18      	it	ne
 80031f6:	2500      	movne	r5, #0
 80031f8:	6832      	ldr	r2, [r6, #0]
 80031fa:	f04f 0600 	mov.w	r6, #0
 80031fe:	68a3      	ldr	r3, [r4, #8]
 8003200:	bf08      	it	eq
 8003202:	1aad      	subeq	r5, r5, r2
 8003204:	6922      	ldr	r2, [r4, #16]
 8003206:	bf08      	it	eq
 8003208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800320c:	4293      	cmp	r3, r2
 800320e:	bfc4      	itt	gt
 8003210:	1a9b      	subgt	r3, r3, r2
 8003212:	18ed      	addgt	r5, r5, r3
 8003214:	341a      	adds	r4, #26
 8003216:	42b5      	cmp	r5, r6
 8003218:	d11a      	bne.n	8003250 <_printf_common+0xcc>
 800321a:	2000      	movs	r0, #0
 800321c:	e008      	b.n	8003230 <_printf_common+0xac>
 800321e:	2301      	movs	r3, #1
 8003220:	4652      	mov	r2, sl
 8003222:	4649      	mov	r1, r9
 8003224:	4638      	mov	r0, r7
 8003226:	47c0      	blx	r8
 8003228:	3001      	adds	r0, #1
 800322a:	d103      	bne.n	8003234 <_printf_common+0xb0>
 800322c:	f04f 30ff 	mov.w	r0, #4294967295
 8003230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003234:	3501      	adds	r5, #1
 8003236:	e7c4      	b.n	80031c2 <_printf_common+0x3e>
 8003238:	2030      	movs	r0, #48	; 0x30
 800323a:	18e1      	adds	r1, r4, r3
 800323c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003246:	4422      	add	r2, r4
 8003248:	3302      	adds	r3, #2
 800324a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800324e:	e7c5      	b.n	80031dc <_printf_common+0x58>
 8003250:	2301      	movs	r3, #1
 8003252:	4622      	mov	r2, r4
 8003254:	4649      	mov	r1, r9
 8003256:	4638      	mov	r0, r7
 8003258:	47c0      	blx	r8
 800325a:	3001      	adds	r0, #1
 800325c:	d0e6      	beq.n	800322c <_printf_common+0xa8>
 800325e:	3601      	adds	r6, #1
 8003260:	e7d9      	b.n	8003216 <_printf_common+0x92>
	...

08003264 <_printf_i>:
 8003264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003268:	7e0f      	ldrb	r7, [r1, #24]
 800326a:	4691      	mov	r9, r2
 800326c:	2f78      	cmp	r7, #120	; 0x78
 800326e:	4680      	mov	r8, r0
 8003270:	460c      	mov	r4, r1
 8003272:	469a      	mov	sl, r3
 8003274:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003276:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800327a:	d807      	bhi.n	800328c <_printf_i+0x28>
 800327c:	2f62      	cmp	r7, #98	; 0x62
 800327e:	d80a      	bhi.n	8003296 <_printf_i+0x32>
 8003280:	2f00      	cmp	r7, #0
 8003282:	f000 80d9 	beq.w	8003438 <_printf_i+0x1d4>
 8003286:	2f58      	cmp	r7, #88	; 0x58
 8003288:	f000 80a4 	beq.w	80033d4 <_printf_i+0x170>
 800328c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003294:	e03a      	b.n	800330c <_printf_i+0xa8>
 8003296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800329a:	2b15      	cmp	r3, #21
 800329c:	d8f6      	bhi.n	800328c <_printf_i+0x28>
 800329e:	a101      	add	r1, pc, #4	; (adr r1, 80032a4 <_printf_i+0x40>)
 80032a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032a4:	080032fd 	.word	0x080032fd
 80032a8:	08003311 	.word	0x08003311
 80032ac:	0800328d 	.word	0x0800328d
 80032b0:	0800328d 	.word	0x0800328d
 80032b4:	0800328d 	.word	0x0800328d
 80032b8:	0800328d 	.word	0x0800328d
 80032bc:	08003311 	.word	0x08003311
 80032c0:	0800328d 	.word	0x0800328d
 80032c4:	0800328d 	.word	0x0800328d
 80032c8:	0800328d 	.word	0x0800328d
 80032cc:	0800328d 	.word	0x0800328d
 80032d0:	0800341f 	.word	0x0800341f
 80032d4:	08003341 	.word	0x08003341
 80032d8:	08003401 	.word	0x08003401
 80032dc:	0800328d 	.word	0x0800328d
 80032e0:	0800328d 	.word	0x0800328d
 80032e4:	08003441 	.word	0x08003441
 80032e8:	0800328d 	.word	0x0800328d
 80032ec:	08003341 	.word	0x08003341
 80032f0:	0800328d 	.word	0x0800328d
 80032f4:	0800328d 	.word	0x0800328d
 80032f8:	08003409 	.word	0x08003409
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	1d1a      	adds	r2, r3, #4
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	602a      	str	r2, [r5, #0]
 8003304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800330c:	2301      	movs	r3, #1
 800330e:	e0a4      	b.n	800345a <_printf_i+0x1f6>
 8003310:	6820      	ldr	r0, [r4, #0]
 8003312:	6829      	ldr	r1, [r5, #0]
 8003314:	0606      	lsls	r6, r0, #24
 8003316:	f101 0304 	add.w	r3, r1, #4
 800331a:	d50a      	bpl.n	8003332 <_printf_i+0xce>
 800331c:	680e      	ldr	r6, [r1, #0]
 800331e:	602b      	str	r3, [r5, #0]
 8003320:	2e00      	cmp	r6, #0
 8003322:	da03      	bge.n	800332c <_printf_i+0xc8>
 8003324:	232d      	movs	r3, #45	; 0x2d
 8003326:	4276      	negs	r6, r6
 8003328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800332c:	230a      	movs	r3, #10
 800332e:	485e      	ldr	r0, [pc, #376]	; (80034a8 <_printf_i+0x244>)
 8003330:	e019      	b.n	8003366 <_printf_i+0x102>
 8003332:	680e      	ldr	r6, [r1, #0]
 8003334:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003338:	602b      	str	r3, [r5, #0]
 800333a:	bf18      	it	ne
 800333c:	b236      	sxthne	r6, r6
 800333e:	e7ef      	b.n	8003320 <_printf_i+0xbc>
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	6820      	ldr	r0, [r4, #0]
 8003344:	1d19      	adds	r1, r3, #4
 8003346:	6029      	str	r1, [r5, #0]
 8003348:	0601      	lsls	r1, r0, #24
 800334a:	d501      	bpl.n	8003350 <_printf_i+0xec>
 800334c:	681e      	ldr	r6, [r3, #0]
 800334e:	e002      	b.n	8003356 <_printf_i+0xf2>
 8003350:	0646      	lsls	r6, r0, #25
 8003352:	d5fb      	bpl.n	800334c <_printf_i+0xe8>
 8003354:	881e      	ldrh	r6, [r3, #0]
 8003356:	2f6f      	cmp	r7, #111	; 0x6f
 8003358:	bf0c      	ite	eq
 800335a:	2308      	moveq	r3, #8
 800335c:	230a      	movne	r3, #10
 800335e:	4852      	ldr	r0, [pc, #328]	; (80034a8 <_printf_i+0x244>)
 8003360:	2100      	movs	r1, #0
 8003362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003366:	6865      	ldr	r5, [r4, #4]
 8003368:	2d00      	cmp	r5, #0
 800336a:	bfa8      	it	ge
 800336c:	6821      	ldrge	r1, [r4, #0]
 800336e:	60a5      	str	r5, [r4, #8]
 8003370:	bfa4      	itt	ge
 8003372:	f021 0104 	bicge.w	r1, r1, #4
 8003376:	6021      	strge	r1, [r4, #0]
 8003378:	b90e      	cbnz	r6, 800337e <_printf_i+0x11a>
 800337a:	2d00      	cmp	r5, #0
 800337c:	d04d      	beq.n	800341a <_printf_i+0x1b6>
 800337e:	4615      	mov	r5, r2
 8003380:	fbb6 f1f3 	udiv	r1, r6, r3
 8003384:	fb03 6711 	mls	r7, r3, r1, r6
 8003388:	5dc7      	ldrb	r7, [r0, r7]
 800338a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800338e:	4637      	mov	r7, r6
 8003390:	42bb      	cmp	r3, r7
 8003392:	460e      	mov	r6, r1
 8003394:	d9f4      	bls.n	8003380 <_printf_i+0x11c>
 8003396:	2b08      	cmp	r3, #8
 8003398:	d10b      	bne.n	80033b2 <_printf_i+0x14e>
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	07de      	lsls	r6, r3, #31
 800339e:	d508      	bpl.n	80033b2 <_printf_i+0x14e>
 80033a0:	6923      	ldr	r3, [r4, #16]
 80033a2:	6861      	ldr	r1, [r4, #4]
 80033a4:	4299      	cmp	r1, r3
 80033a6:	bfde      	ittt	le
 80033a8:	2330      	movle	r3, #48	; 0x30
 80033aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033b2:	1b52      	subs	r2, r2, r5
 80033b4:	6122      	str	r2, [r4, #16]
 80033b6:	464b      	mov	r3, r9
 80033b8:	4621      	mov	r1, r4
 80033ba:	4640      	mov	r0, r8
 80033bc:	f8cd a000 	str.w	sl, [sp]
 80033c0:	aa03      	add	r2, sp, #12
 80033c2:	f7ff fedf 	bl	8003184 <_printf_common>
 80033c6:	3001      	adds	r0, #1
 80033c8:	d14c      	bne.n	8003464 <_printf_i+0x200>
 80033ca:	f04f 30ff 	mov.w	r0, #4294967295
 80033ce:	b004      	add	sp, #16
 80033d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033d4:	4834      	ldr	r0, [pc, #208]	; (80034a8 <_printf_i+0x244>)
 80033d6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80033da:	6829      	ldr	r1, [r5, #0]
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	f851 6b04 	ldr.w	r6, [r1], #4
 80033e2:	6029      	str	r1, [r5, #0]
 80033e4:	061d      	lsls	r5, r3, #24
 80033e6:	d514      	bpl.n	8003412 <_printf_i+0x1ae>
 80033e8:	07df      	lsls	r7, r3, #31
 80033ea:	bf44      	itt	mi
 80033ec:	f043 0320 	orrmi.w	r3, r3, #32
 80033f0:	6023      	strmi	r3, [r4, #0]
 80033f2:	b91e      	cbnz	r6, 80033fc <_printf_i+0x198>
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	f023 0320 	bic.w	r3, r3, #32
 80033fa:	6023      	str	r3, [r4, #0]
 80033fc:	2310      	movs	r3, #16
 80033fe:	e7af      	b.n	8003360 <_printf_i+0xfc>
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	f043 0320 	orr.w	r3, r3, #32
 8003406:	6023      	str	r3, [r4, #0]
 8003408:	2378      	movs	r3, #120	; 0x78
 800340a:	4828      	ldr	r0, [pc, #160]	; (80034ac <_printf_i+0x248>)
 800340c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003410:	e7e3      	b.n	80033da <_printf_i+0x176>
 8003412:	0659      	lsls	r1, r3, #25
 8003414:	bf48      	it	mi
 8003416:	b2b6      	uxthmi	r6, r6
 8003418:	e7e6      	b.n	80033e8 <_printf_i+0x184>
 800341a:	4615      	mov	r5, r2
 800341c:	e7bb      	b.n	8003396 <_printf_i+0x132>
 800341e:	682b      	ldr	r3, [r5, #0]
 8003420:	6826      	ldr	r6, [r4, #0]
 8003422:	1d18      	adds	r0, r3, #4
 8003424:	6961      	ldr	r1, [r4, #20]
 8003426:	6028      	str	r0, [r5, #0]
 8003428:	0635      	lsls	r5, r6, #24
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	d501      	bpl.n	8003432 <_printf_i+0x1ce>
 800342e:	6019      	str	r1, [r3, #0]
 8003430:	e002      	b.n	8003438 <_printf_i+0x1d4>
 8003432:	0670      	lsls	r0, r6, #25
 8003434:	d5fb      	bpl.n	800342e <_printf_i+0x1ca>
 8003436:	8019      	strh	r1, [r3, #0]
 8003438:	2300      	movs	r3, #0
 800343a:	4615      	mov	r5, r2
 800343c:	6123      	str	r3, [r4, #16]
 800343e:	e7ba      	b.n	80033b6 <_printf_i+0x152>
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	2100      	movs	r1, #0
 8003444:	1d1a      	adds	r2, r3, #4
 8003446:	602a      	str	r2, [r5, #0]
 8003448:	681d      	ldr	r5, [r3, #0]
 800344a:	6862      	ldr	r2, [r4, #4]
 800344c:	4628      	mov	r0, r5
 800344e:	f000 f82f 	bl	80034b0 <memchr>
 8003452:	b108      	cbz	r0, 8003458 <_printf_i+0x1f4>
 8003454:	1b40      	subs	r0, r0, r5
 8003456:	6060      	str	r0, [r4, #4]
 8003458:	6863      	ldr	r3, [r4, #4]
 800345a:	6123      	str	r3, [r4, #16]
 800345c:	2300      	movs	r3, #0
 800345e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003462:	e7a8      	b.n	80033b6 <_printf_i+0x152>
 8003464:	462a      	mov	r2, r5
 8003466:	4649      	mov	r1, r9
 8003468:	4640      	mov	r0, r8
 800346a:	6923      	ldr	r3, [r4, #16]
 800346c:	47d0      	blx	sl
 800346e:	3001      	adds	r0, #1
 8003470:	d0ab      	beq.n	80033ca <_printf_i+0x166>
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	079b      	lsls	r3, r3, #30
 8003476:	d413      	bmi.n	80034a0 <_printf_i+0x23c>
 8003478:	68e0      	ldr	r0, [r4, #12]
 800347a:	9b03      	ldr	r3, [sp, #12]
 800347c:	4298      	cmp	r0, r3
 800347e:	bfb8      	it	lt
 8003480:	4618      	movlt	r0, r3
 8003482:	e7a4      	b.n	80033ce <_printf_i+0x16a>
 8003484:	2301      	movs	r3, #1
 8003486:	4632      	mov	r2, r6
 8003488:	4649      	mov	r1, r9
 800348a:	4640      	mov	r0, r8
 800348c:	47d0      	blx	sl
 800348e:	3001      	adds	r0, #1
 8003490:	d09b      	beq.n	80033ca <_printf_i+0x166>
 8003492:	3501      	adds	r5, #1
 8003494:	68e3      	ldr	r3, [r4, #12]
 8003496:	9903      	ldr	r1, [sp, #12]
 8003498:	1a5b      	subs	r3, r3, r1
 800349a:	42ab      	cmp	r3, r5
 800349c:	dcf2      	bgt.n	8003484 <_printf_i+0x220>
 800349e:	e7eb      	b.n	8003478 <_printf_i+0x214>
 80034a0:	2500      	movs	r5, #0
 80034a2:	f104 0619 	add.w	r6, r4, #25
 80034a6:	e7f5      	b.n	8003494 <_printf_i+0x230>
 80034a8:	08003809 	.word	0x08003809
 80034ac:	0800381a 	.word	0x0800381a

080034b0 <memchr>:
 80034b0:	4603      	mov	r3, r0
 80034b2:	b510      	push	{r4, lr}
 80034b4:	b2c9      	uxtb	r1, r1
 80034b6:	4402      	add	r2, r0
 80034b8:	4293      	cmp	r3, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	d101      	bne.n	80034c2 <memchr+0x12>
 80034be:	2000      	movs	r0, #0
 80034c0:	e003      	b.n	80034ca <memchr+0x1a>
 80034c2:	7804      	ldrb	r4, [r0, #0]
 80034c4:	3301      	adds	r3, #1
 80034c6:	428c      	cmp	r4, r1
 80034c8:	d1f6      	bne.n	80034b8 <memchr+0x8>
 80034ca:	bd10      	pop	{r4, pc}

080034cc <memcpy>:
 80034cc:	440a      	add	r2, r1
 80034ce:	4291      	cmp	r1, r2
 80034d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80034d4:	d100      	bne.n	80034d8 <memcpy+0xc>
 80034d6:	4770      	bx	lr
 80034d8:	b510      	push	{r4, lr}
 80034da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034de:	4291      	cmp	r1, r2
 80034e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034e4:	d1f9      	bne.n	80034da <memcpy+0xe>
 80034e6:	bd10      	pop	{r4, pc}

080034e8 <memmove>:
 80034e8:	4288      	cmp	r0, r1
 80034ea:	b510      	push	{r4, lr}
 80034ec:	eb01 0402 	add.w	r4, r1, r2
 80034f0:	d902      	bls.n	80034f8 <memmove+0x10>
 80034f2:	4284      	cmp	r4, r0
 80034f4:	4623      	mov	r3, r4
 80034f6:	d807      	bhi.n	8003508 <memmove+0x20>
 80034f8:	1e43      	subs	r3, r0, #1
 80034fa:	42a1      	cmp	r1, r4
 80034fc:	d008      	beq.n	8003510 <memmove+0x28>
 80034fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003502:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003506:	e7f8      	b.n	80034fa <memmove+0x12>
 8003508:	4601      	mov	r1, r0
 800350a:	4402      	add	r2, r0
 800350c:	428a      	cmp	r2, r1
 800350e:	d100      	bne.n	8003512 <memmove+0x2a>
 8003510:	bd10      	pop	{r4, pc}
 8003512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003516:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800351a:	e7f7      	b.n	800350c <memmove+0x24>

0800351c <_free_r>:
 800351c:	b538      	push	{r3, r4, r5, lr}
 800351e:	4605      	mov	r5, r0
 8003520:	2900      	cmp	r1, #0
 8003522:	d040      	beq.n	80035a6 <_free_r+0x8a>
 8003524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003528:	1f0c      	subs	r4, r1, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	bfb8      	it	lt
 800352e:	18e4      	addlt	r4, r4, r3
 8003530:	f000 f910 	bl	8003754 <__malloc_lock>
 8003534:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <_free_r+0x8c>)
 8003536:	6813      	ldr	r3, [r2, #0]
 8003538:	b933      	cbnz	r3, 8003548 <_free_r+0x2c>
 800353a:	6063      	str	r3, [r4, #4]
 800353c:	6014      	str	r4, [r2, #0]
 800353e:	4628      	mov	r0, r5
 8003540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003544:	f000 b90c 	b.w	8003760 <__malloc_unlock>
 8003548:	42a3      	cmp	r3, r4
 800354a:	d908      	bls.n	800355e <_free_r+0x42>
 800354c:	6820      	ldr	r0, [r4, #0]
 800354e:	1821      	adds	r1, r4, r0
 8003550:	428b      	cmp	r3, r1
 8003552:	bf01      	itttt	eq
 8003554:	6819      	ldreq	r1, [r3, #0]
 8003556:	685b      	ldreq	r3, [r3, #4]
 8003558:	1809      	addeq	r1, r1, r0
 800355a:	6021      	streq	r1, [r4, #0]
 800355c:	e7ed      	b.n	800353a <_free_r+0x1e>
 800355e:	461a      	mov	r2, r3
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	b10b      	cbz	r3, 8003568 <_free_r+0x4c>
 8003564:	42a3      	cmp	r3, r4
 8003566:	d9fa      	bls.n	800355e <_free_r+0x42>
 8003568:	6811      	ldr	r1, [r2, #0]
 800356a:	1850      	adds	r0, r2, r1
 800356c:	42a0      	cmp	r0, r4
 800356e:	d10b      	bne.n	8003588 <_free_r+0x6c>
 8003570:	6820      	ldr	r0, [r4, #0]
 8003572:	4401      	add	r1, r0
 8003574:	1850      	adds	r0, r2, r1
 8003576:	4283      	cmp	r3, r0
 8003578:	6011      	str	r1, [r2, #0]
 800357a:	d1e0      	bne.n	800353e <_free_r+0x22>
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4401      	add	r1, r0
 8003582:	6011      	str	r1, [r2, #0]
 8003584:	6053      	str	r3, [r2, #4]
 8003586:	e7da      	b.n	800353e <_free_r+0x22>
 8003588:	d902      	bls.n	8003590 <_free_r+0x74>
 800358a:	230c      	movs	r3, #12
 800358c:	602b      	str	r3, [r5, #0]
 800358e:	e7d6      	b.n	800353e <_free_r+0x22>
 8003590:	6820      	ldr	r0, [r4, #0]
 8003592:	1821      	adds	r1, r4, r0
 8003594:	428b      	cmp	r3, r1
 8003596:	bf01      	itttt	eq
 8003598:	6819      	ldreq	r1, [r3, #0]
 800359a:	685b      	ldreq	r3, [r3, #4]
 800359c:	1809      	addeq	r1, r1, r0
 800359e:	6021      	streq	r1, [r4, #0]
 80035a0:	6063      	str	r3, [r4, #4]
 80035a2:	6054      	str	r4, [r2, #4]
 80035a4:	e7cb      	b.n	800353e <_free_r+0x22>
 80035a6:	bd38      	pop	{r3, r4, r5, pc}
 80035a8:	20000488 	.word	0x20000488

080035ac <sbrk_aligned>:
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	4e0e      	ldr	r6, [pc, #56]	; (80035e8 <sbrk_aligned+0x3c>)
 80035b0:	460c      	mov	r4, r1
 80035b2:	6831      	ldr	r1, [r6, #0]
 80035b4:	4605      	mov	r5, r0
 80035b6:	b911      	cbnz	r1, 80035be <sbrk_aligned+0x12>
 80035b8:	f000 f8bc 	bl	8003734 <_sbrk_r>
 80035bc:	6030      	str	r0, [r6, #0]
 80035be:	4621      	mov	r1, r4
 80035c0:	4628      	mov	r0, r5
 80035c2:	f000 f8b7 	bl	8003734 <_sbrk_r>
 80035c6:	1c43      	adds	r3, r0, #1
 80035c8:	d00a      	beq.n	80035e0 <sbrk_aligned+0x34>
 80035ca:	1cc4      	adds	r4, r0, #3
 80035cc:	f024 0403 	bic.w	r4, r4, #3
 80035d0:	42a0      	cmp	r0, r4
 80035d2:	d007      	beq.n	80035e4 <sbrk_aligned+0x38>
 80035d4:	1a21      	subs	r1, r4, r0
 80035d6:	4628      	mov	r0, r5
 80035d8:	f000 f8ac 	bl	8003734 <_sbrk_r>
 80035dc:	3001      	adds	r0, #1
 80035de:	d101      	bne.n	80035e4 <sbrk_aligned+0x38>
 80035e0:	f04f 34ff 	mov.w	r4, #4294967295
 80035e4:	4620      	mov	r0, r4
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
 80035e8:	2000048c 	.word	0x2000048c

080035ec <_malloc_r>:
 80035ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035f0:	1ccd      	adds	r5, r1, #3
 80035f2:	f025 0503 	bic.w	r5, r5, #3
 80035f6:	3508      	adds	r5, #8
 80035f8:	2d0c      	cmp	r5, #12
 80035fa:	bf38      	it	cc
 80035fc:	250c      	movcc	r5, #12
 80035fe:	2d00      	cmp	r5, #0
 8003600:	4607      	mov	r7, r0
 8003602:	db01      	blt.n	8003608 <_malloc_r+0x1c>
 8003604:	42a9      	cmp	r1, r5
 8003606:	d905      	bls.n	8003614 <_malloc_r+0x28>
 8003608:	230c      	movs	r3, #12
 800360a:	2600      	movs	r6, #0
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	4630      	mov	r0, r6
 8003610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003614:	4e2e      	ldr	r6, [pc, #184]	; (80036d0 <_malloc_r+0xe4>)
 8003616:	f000 f89d 	bl	8003754 <__malloc_lock>
 800361a:	6833      	ldr	r3, [r6, #0]
 800361c:	461c      	mov	r4, r3
 800361e:	bb34      	cbnz	r4, 800366e <_malloc_r+0x82>
 8003620:	4629      	mov	r1, r5
 8003622:	4638      	mov	r0, r7
 8003624:	f7ff ffc2 	bl	80035ac <sbrk_aligned>
 8003628:	1c43      	adds	r3, r0, #1
 800362a:	4604      	mov	r4, r0
 800362c:	d14d      	bne.n	80036ca <_malloc_r+0xde>
 800362e:	6834      	ldr	r4, [r6, #0]
 8003630:	4626      	mov	r6, r4
 8003632:	2e00      	cmp	r6, #0
 8003634:	d140      	bne.n	80036b8 <_malloc_r+0xcc>
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	4631      	mov	r1, r6
 800363a:	4638      	mov	r0, r7
 800363c:	eb04 0803 	add.w	r8, r4, r3
 8003640:	f000 f878 	bl	8003734 <_sbrk_r>
 8003644:	4580      	cmp	r8, r0
 8003646:	d13a      	bne.n	80036be <_malloc_r+0xd2>
 8003648:	6821      	ldr	r1, [r4, #0]
 800364a:	3503      	adds	r5, #3
 800364c:	1a6d      	subs	r5, r5, r1
 800364e:	f025 0503 	bic.w	r5, r5, #3
 8003652:	3508      	adds	r5, #8
 8003654:	2d0c      	cmp	r5, #12
 8003656:	bf38      	it	cc
 8003658:	250c      	movcc	r5, #12
 800365a:	4638      	mov	r0, r7
 800365c:	4629      	mov	r1, r5
 800365e:	f7ff ffa5 	bl	80035ac <sbrk_aligned>
 8003662:	3001      	adds	r0, #1
 8003664:	d02b      	beq.n	80036be <_malloc_r+0xd2>
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	442b      	add	r3, r5
 800366a:	6023      	str	r3, [r4, #0]
 800366c:	e00e      	b.n	800368c <_malloc_r+0xa0>
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	1b52      	subs	r2, r2, r5
 8003672:	d41e      	bmi.n	80036b2 <_malloc_r+0xc6>
 8003674:	2a0b      	cmp	r2, #11
 8003676:	d916      	bls.n	80036a6 <_malloc_r+0xba>
 8003678:	1961      	adds	r1, r4, r5
 800367a:	42a3      	cmp	r3, r4
 800367c:	6025      	str	r5, [r4, #0]
 800367e:	bf18      	it	ne
 8003680:	6059      	strne	r1, [r3, #4]
 8003682:	6863      	ldr	r3, [r4, #4]
 8003684:	bf08      	it	eq
 8003686:	6031      	streq	r1, [r6, #0]
 8003688:	5162      	str	r2, [r4, r5]
 800368a:	604b      	str	r3, [r1, #4]
 800368c:	4638      	mov	r0, r7
 800368e:	f104 060b 	add.w	r6, r4, #11
 8003692:	f000 f865 	bl	8003760 <__malloc_unlock>
 8003696:	f026 0607 	bic.w	r6, r6, #7
 800369a:	1d23      	adds	r3, r4, #4
 800369c:	1af2      	subs	r2, r6, r3
 800369e:	d0b6      	beq.n	800360e <_malloc_r+0x22>
 80036a0:	1b9b      	subs	r3, r3, r6
 80036a2:	50a3      	str	r3, [r4, r2]
 80036a4:	e7b3      	b.n	800360e <_malloc_r+0x22>
 80036a6:	6862      	ldr	r2, [r4, #4]
 80036a8:	42a3      	cmp	r3, r4
 80036aa:	bf0c      	ite	eq
 80036ac:	6032      	streq	r2, [r6, #0]
 80036ae:	605a      	strne	r2, [r3, #4]
 80036b0:	e7ec      	b.n	800368c <_malloc_r+0xa0>
 80036b2:	4623      	mov	r3, r4
 80036b4:	6864      	ldr	r4, [r4, #4]
 80036b6:	e7b2      	b.n	800361e <_malloc_r+0x32>
 80036b8:	4634      	mov	r4, r6
 80036ba:	6876      	ldr	r6, [r6, #4]
 80036bc:	e7b9      	b.n	8003632 <_malloc_r+0x46>
 80036be:	230c      	movs	r3, #12
 80036c0:	4638      	mov	r0, r7
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	f000 f84c 	bl	8003760 <__malloc_unlock>
 80036c8:	e7a1      	b.n	800360e <_malloc_r+0x22>
 80036ca:	6025      	str	r5, [r4, #0]
 80036cc:	e7de      	b.n	800368c <_malloc_r+0xa0>
 80036ce:	bf00      	nop
 80036d0:	20000488 	.word	0x20000488

080036d4 <_realloc_r>:
 80036d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036d8:	4680      	mov	r8, r0
 80036da:	4614      	mov	r4, r2
 80036dc:	460e      	mov	r6, r1
 80036de:	b921      	cbnz	r1, 80036ea <_realloc_r+0x16>
 80036e0:	4611      	mov	r1, r2
 80036e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036e6:	f7ff bf81 	b.w	80035ec <_malloc_r>
 80036ea:	b92a      	cbnz	r2, 80036f8 <_realloc_r+0x24>
 80036ec:	f7ff ff16 	bl	800351c <_free_r>
 80036f0:	4625      	mov	r5, r4
 80036f2:	4628      	mov	r0, r5
 80036f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036f8:	f000 f838 	bl	800376c <_malloc_usable_size_r>
 80036fc:	4284      	cmp	r4, r0
 80036fe:	4607      	mov	r7, r0
 8003700:	d802      	bhi.n	8003708 <_realloc_r+0x34>
 8003702:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003706:	d812      	bhi.n	800372e <_realloc_r+0x5a>
 8003708:	4621      	mov	r1, r4
 800370a:	4640      	mov	r0, r8
 800370c:	f7ff ff6e 	bl	80035ec <_malloc_r>
 8003710:	4605      	mov	r5, r0
 8003712:	2800      	cmp	r0, #0
 8003714:	d0ed      	beq.n	80036f2 <_realloc_r+0x1e>
 8003716:	42bc      	cmp	r4, r7
 8003718:	4622      	mov	r2, r4
 800371a:	4631      	mov	r1, r6
 800371c:	bf28      	it	cs
 800371e:	463a      	movcs	r2, r7
 8003720:	f7ff fed4 	bl	80034cc <memcpy>
 8003724:	4631      	mov	r1, r6
 8003726:	4640      	mov	r0, r8
 8003728:	f7ff fef8 	bl	800351c <_free_r>
 800372c:	e7e1      	b.n	80036f2 <_realloc_r+0x1e>
 800372e:	4635      	mov	r5, r6
 8003730:	e7df      	b.n	80036f2 <_realloc_r+0x1e>
	...

08003734 <_sbrk_r>:
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	2300      	movs	r3, #0
 8003738:	4d05      	ldr	r5, [pc, #20]	; (8003750 <_sbrk_r+0x1c>)
 800373a:	4604      	mov	r4, r0
 800373c:	4608      	mov	r0, r1
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	f7fd fa36 	bl	8000bb0 <_sbrk>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	d102      	bne.n	800374e <_sbrk_r+0x1a>
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	b103      	cbz	r3, 800374e <_sbrk_r+0x1a>
 800374c:	6023      	str	r3, [r4, #0]
 800374e:	bd38      	pop	{r3, r4, r5, pc}
 8003750:	20000490 	.word	0x20000490

08003754 <__malloc_lock>:
 8003754:	4801      	ldr	r0, [pc, #4]	; (800375c <__malloc_lock+0x8>)
 8003756:	f000 b811 	b.w	800377c <__retarget_lock_acquire_recursive>
 800375a:	bf00      	nop
 800375c:	20000494 	.word	0x20000494

08003760 <__malloc_unlock>:
 8003760:	4801      	ldr	r0, [pc, #4]	; (8003768 <__malloc_unlock+0x8>)
 8003762:	f000 b80c 	b.w	800377e <__retarget_lock_release_recursive>
 8003766:	bf00      	nop
 8003768:	20000494 	.word	0x20000494

0800376c <_malloc_usable_size_r>:
 800376c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003770:	1f18      	subs	r0, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	bfbc      	itt	lt
 8003776:	580b      	ldrlt	r3, [r1, r0]
 8003778:	18c0      	addlt	r0, r0, r3
 800377a:	4770      	bx	lr

0800377c <__retarget_lock_acquire_recursive>:
 800377c:	4770      	bx	lr

0800377e <__retarget_lock_release_recursive>:
 800377e:	4770      	bx	lr

08003780 <_init>:
 8003780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003782:	bf00      	nop
 8003784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003786:	bc08      	pop	{r3}
 8003788:	469e      	mov	lr, r3
 800378a:	4770      	bx	lr

0800378c <_fini>:
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378e:	bf00      	nop
 8003790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003792:	bc08      	pop	{r3}
 8003794:	469e      	mov	lr, r3
 8003796:	4770      	bx	lr
